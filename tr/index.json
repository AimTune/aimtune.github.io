[{"content":"","date":null,"permalink":"/tr/categories/big-data-serisi/","section":"Categories","summary":"","title":"Big-Data-Serisi"},{"content":"","date":null,"permalink":"/tr/tags/b%C3%BCy%C3%BCk-veri/","section":"Tags","summary":"","title":"Büyük Veri"},{"content":" Bu yazı serimizde, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz. ","date":null,"permalink":"/tr/series/big-data/","section":"Series","summary":"Bu yazı serimizde, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz.","title":"Büyük Veri (Big Data) Nedir?"},{"content":"Selamlar,\nUzun zamandır üzerine araştırma yapmak istediğim ve geçmişte biraz da olsa öğrenmeye çalıştığım Büyük Veri konusuna olan ilgim yeniden canlandı. Bu kez, daha derinlemesine bir şekilde incelemek ve öğrendiklerimi bir yazı serisiyle paylaşmaya karar verdim. Ayrıca fırsatım olursa bu seride bir de futbol verileri üzerinde (veya başka bir veri üzerinde) basit de olsa bir büyük veri çalışması yapmak istiyorum. Bu süreçte de birçok farklı kaynaktan yararlanmaya çalışıyorum. 12345\nPeki o halde başlayalım, nedir bu Büyük Veri (Big Data)? Günümüzün dijital dünyasında büyük veri, işletmeler ve organizasyonlar için vazgeçilmez bir kaynak haline gelmiştir. Bu serinin ilk yazısında, büyük verinin ne olduğunu, temel bileşenlerini, Hadoop, Spark ve NoSQL gibi teknolojilerin bu alandaki rollerini ve futbol sektöründe nasıl uygulandıklarını inceleyeceğiz.\nVeriniz yoksa, sadece bir başka fikri olan insansınız.\n— W. Edwards Deming\nVeri, yeni petrole benzer.\n— Clive Humby\nKeyifli okumalar!\nBüyük Veri (Big Data) Nedir? #Büyük veri, geleneksel veri işleme yöntemleriyle yönetilmesi ve analiz edilmesi zor olan, çok büyük hacimde ve çeşitli kaynaklardan gelen veri kümelerini ifade eder. Büyük veri, genellikle 5V modeliyle açıklanır:\nHacim (Volume): Oluşturulan veri miktarının büyüklüğünü ifade eder. Örneğin, futbol maçlarında saniyede üretilen konum ve hareket verileri terabaytlarca bilgi oluşturabilir. Çeşitlilik (Variety): Verinin farklı format ve türlerde olmasıdır; yapılandırılmış (oyuncu istatistikleri), yarı yapılandırılmış (JSON maç raporları) ve yapılandırılmamış (maç videoları) veri gibi. Hız (Velocity): Verinin oluşturulma ve işlenme hızını belirtir. Örneğin, bir futbol maçında sensörlerden gelen veriler anlık olarak analiz edilebilir. Doğruluk (Veracity): Verinin doğruluğu ve güvenilirliğidir. Maç istatistiklerinin hatasız ve anlamlı olması için veri kaynaklarının doğruluğu önemlidir. Değer (Value): Verinin organizasyonlara sağladığı faydadır. Örneğin, oyuncu performans analizinden elde edilen bilgiler, antrenman programlarının optimize edilmesini sağlar. Kişisel yorumum #İncelediğim kaynaklarda, 5V modelinin özellikle ilk üç boyutu (Hacim, Çeşitlilik ve Hız) üzerinde daha fazla duruluyor. Ancak bana göre, son iki boyut olan Doğruluk ve Değer, en az ilk üçü kadar önemli.\nÖrneğin, elimizde yalnızca bir şirkete ait on yıllık bir veri olduğunu düşünelim. Bu veriler satış ve yatırımları içeriyor olsun. Eğer bu verilerin içinde yalnızca şirket ismi gibi doğrudan anlam ifade etmeyen bilgiler varsa, bunlar bizim için pek bir değer taşımaz; aksine, gereksiz bir hesaplama maliyeti oluşturur. Ancak, bu verilere ek olarak şirketin o yıl içerisindeki misyonu ve hedefleri gibi bilgiler de kayıt altına alınmışsa, bu veriler satışlar üzerindeki etkileri analiz etmemizi sağlar. Böylece, elde edilen veriler daha anlamlı hale gelir ve çıktılarımız daha verimli olur.\nBu nedenle, verilerimizin yalnızca hacmi ve çeşitliliği değil, aynı zamanda doğruluğu ve sunduğu değer de büyük veri analizinde kritik öneme sahiptir.\nHadoop Nedir? #Hadoop, büyük veri işleme için kullanılan açık kaynaklı bir framework\u0026rsquo;tür. Apache Vakfı tarafından geliştirilen bu sistem, çok büyük veri kümelerini dağıtık bir ortamda depolamak ve işlemek için tasarlanmıştır 6. Hadoop\u0026rsquo;un temel bileşenleri şunlardır:\nHDFS (Hadoop Distributed File System): Büyük veriyi dağıtık bir şekilde saklar. MapReduce: Büyük veri setlerini işlemeye yönelik bir programlama modeli. YARN (Yet Another Resource Negotiator): Kaynak yönetimini ve iş planlamasını sağlar. Hadoop, futbol gibi veri yoğun sektörlerde büyük maç istatistiklerini saklamak ve analiz etmek için kullanılabilir. Bu kavramlara daha sonraki yazılarımızda ayrıntılı değineceğiz.\nSpark Nedir? #Apache Spark, büyük veri işleme için kullanılan hızlı bir veri analitik motorudur. Hadoop’a benzer şekilde dağıtık veri işlemeye odaklanır ancak Spark, özellikle hafızada veri işleme (in-memory processing) yeteneğiyle öne çıkar 7.\nHızlı İşleme: Spark, veriyi bellekte işlediği için analizlerde 100 kata kadar hız artışı sağlar. Esneklik: SQL, veri akışı (streaming) ve makine öğrenimi gibi farklı görevleri destekler. Kullanım Alanları: Gerçek zamanlı veri analizi, futbol maçlarında akış verilerinin anlık değerlendirilmesi gibi. NoSQL Nedir? #NoSQL (Not Only SQL), yapılandırılmamış veya yarı yapılandırılmış verilerin saklanması ve işlenmesi için tasarlanmış bir veritabanı türüdür 8. Örnek türler:\nDoküman Tabanlı Veritabanları: JSON veya BSON formatında verileri işler. Örneğin, MongoDB. Anahtar-Değer Depoları: Veriler anahtar-değer çiftleri olarak saklanır. Örneğin, Redis. Graf Veritabanları: Oyuncular arasındaki bağlantıları analiz etmek için kullanılabilir. Örneğin, Neo4j. NoSQL, futbol maçlarında üretilen büyük veri setlerini hızlıca sorgulamak ve analiz etmek için ideal bir çözüm sunar.\nFutbol Sektöründe Büyük Veri Uygulamaları #Büyük veri, futbol sektöründe geniş bir uygulama alanı bulmuştur:\nOyuncu Performans Analizi: Sensörler ve kameralarla toplanan veriler, oyuncuların hızını, dayanıklılığını ve taktik uyumunu ölçer. Taktiksel Analiz: Rakip takımların oyun düzenleri, büyük veri analitiği ile incelenir ve taktik geliştirilir. Taraftar Deneyimi: Taraftarların sosyal medya etkileşimleri analiz edilerek kişiselleştirilmiş kampanyalar oluşturulur. Maç İstatistikleri: Gerçek zamanlı analizlerle maç boyunca taktiksel değişikliklere olanak tanır. Örneğin, Spark ve NoSQL veritabanları, bir futbol maçında saniyede üretilen milyonlarca veri noktasını işleyerek antrenörlere gerçek zamanlı raporlar sunabilir.\nBüyük Veri (Big Data) alanında uzmanlaşmış profesyonellere olan talep, günümüz iş dünyasında hızla artmaktadır. Veri analistleri, veri mühendisleri ve veri bilimcileri gibi uzmanlar, şirketlerin stratejik kararlar almasına, operasyonel verimliliklerini artırmasına ve müşteri deneyimlerini iyileştirmesine yardımcı olmaktadır. Özellikle teknoloji, finans, sağlık ve perakende sektörlerinde büyük veri uzmanlarına olan ihtiyaç belirgin bir şekilde artmaktadır.\nTürkiye\u0026rsquo;de de büyük veri alanında uzmanlaşmış profesyonellere yönelik iş ilanları bulunmaktadır. Örneğin, Veri Analiz Uzmanı pozisyonları, farklı sektörlerde faaliyet gösteren firmalar tarafından sıkça aranmaktadır.\nBüyük Veri uzmanları, veri analitiği, makine öğrenimi ve yapay zeka gibi alanlarda derinlemesine bilgi ve deneyime sahip olmalıdır. Bu uzmanlık, onlara yüksek maaşlar ve hızlı kariyer ilerlemesi gibi avantajlar sunmaktadır.\nFutbol kulüpleri de büyük veri mühendislerine ihtiyaç duymaktadır. Örneğin, Manchester United ve Liverpool gibi dev futbol kulüpleri, veri mühendisliği alanında uzmanlaşmış profesyoneller aramaktadır. Bu tür pozisyonlar, spor endüstrisinde veri biliminin önemini ve büyüklüğünü göstermektedir. 9\nLinkedIn\u0026rsquo;de Daha Önceden Paylaşılmış Bir İş İlanı Udemy - Yeni Başlayanlar için Big Data: NoSQL \u0026amp; Spark \u0026amp; Hadoop\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - Sıfırdan Her Yönüyle Big Data ( Büyük Veri ) Eğitimi\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - (50 Saat) Python A-Z™: Veri Bilimi ve Machine Learning\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - Software Architecture \u0026amp; Technology of Large-Scale Systems\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChatGPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nApache Software Foundation. Apache Hadoop Documentation. https://hadoop.apache.org\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nApache Software Foundation. Apache Spark Documentation. https://spark.apache.org\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMongoDB, Inc. MongoDB Official Website. https://www.mongodb.com\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLead Data Scientist Liverpool Careers\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"18 Ocak 2025","permalink":"/tr/series/big-data/1-big-data-nedir/","section":"Series","summary":"Bu yazımızda, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz.","title":"Büyük Veri: Nedir, Teknolojileri"},{"content":"","date":null,"permalink":"/tr/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tr/tags/futbol/","section":"Tags","summary":"","title":"Futbol"},{"content":"","date":null,"permalink":"/tr/tags/hadoop/","section":"Tags","summary":"","title":"Hadoop"},{"content":"","date":null,"permalink":"/tr/","section":"Hamza Ağar","summary":"","title":"Hamza Ağar"},{"content":"","date":null,"permalink":"/tr/tags/index/","section":"Tags","summary":"","title":"Index"},{"content":"","date":null,"permalink":"/tr/tags/nosql/","section":"Tags","summary":"","title":"NoSQL"},{"content":"","date":null,"permalink":"/tr/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":null,"permalink":"/tr/tags/spark/","section":"Tags","summary":"","title":"Spark"},{"content":"","date":null,"permalink":"/tr/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tr/topics/chain-of-responsibility/","section":"Topics","summary":"","title":"Chain of Responsibility"},{"content":" Chain of Responsibility Nedir? #\nPhoto by Refactoring Guru # Chain of Responsibility\u0026rsquo;nin Tanımı #Chain of Responsibility, bir isteğin, bir zincir şeklinde düzenlenmiş işleyiciler arasında dolaştırılarak işlenmesini sağlar. Her işleyici isteği işleyebilir veya bir sonraki işleyiciye iletebilir.\nChain of Responsibility\u0026rsquo;nin Temel Bileşenleri # Handler (İşleyici): İsteği işleyen veya bir sonraki işleyiciye gönderen temel bileşen. Concrete Handler: İsteği belirli kriterlere göre işleyen işleyici sınıfları. Client: İsteği gönderen bileşen. Chain of Responsibility Nasıl Çalışır? # İstek Gönderme: Müşteri isteği bir işleyiciye iletir. İşleme Kontrolü: İşleyici isteği işleyip işlemeyeceğine karar verir. Zincirleme İşleyiciler: İşleyici isteği işleyemiyorsa bir sonraki işleyiciye iletir. Sonuç: İstek işlenir veya tüm zincir dolaşır. Chain of Responsibility Örnek Kod (C#) #public abstract class Handler { protected Handler next; public void SetNext(Handler nextHandler) { this.next = nextHandler; } public abstract void HandleRequest(string request); } public class ConcreteHandlerA : Handler { public override void HandleRequest(string request) { if (request == \u0026#34;A\u0026#34;) { Console.WriteLine(\u0026#34;Handler A is processing the request.\u0026#34;); } else if (next != null) { next.HandleRequest(request); } } } public class ConcreteHandlerB : Handler { public override void HandleRequest(string request) { if (request == \u0026#34;B\u0026#34;) { Console.WriteLine(\u0026#34;Handler B is processing the request.\u0026#34;); } else if (next != null) { next.HandleRequest(request); } } } // Kullanım: var handlerA = new ConcreteHandlerA(); var handlerB = new ConcreteHandlerB(); handlerA.SetNext(handlerB); handlerA.HandleRequest(\u0026#34;B\u0026#34;); Chain of Responsibility\u0026rsquo;nin Avantajları # Gevşek Bağlılık: İsteği gönderen, hangi işleyicinin sorumlu olduğunu bilmek zorunda değildir. Genişletilebilirlik: Yeni işleyiciler eklenebilir ve zincir kolayca yapılandırılabilir. Sorumluluk Dağılımı: Yük birden fazla işleyici arasında dağıtılabilir. Chain of Responsibility\u0026rsquo;nin Dezavantajları # Zincir Karmaşıklığı: Uzun zincirlerde isteğin işlenme süresi uzayabilir. İşlenmeyen İstekler: Hiçbir işleyici isteği işleyemezse, sorun çözülmemiş olabilir. Chain of Responsibility Kullanım Alanları # Alışveriş Siteleri İş Kuralları: Alışveriş sitelerinde sepet gibi iş kollarında iş kuralları çok fazla olabilir. Bunu daha okunabilir ve bakımı kolay hale getirmek için bu desen kullanılabilir. Destek Hizmetleri: Müşteri şikayetlerinin kademeli olarak çözülmesi. İzin Sistemleri: Bir izin talebinin farklı seviyelerde işlenmesi. Oyun Geliştirme: Oyunlarda olayların farklı karakterler veya mekanlar tarafından işlenmesi. Sonuç # Chain of Responsibility, esnek ve genişletilebilir bir çözüm sunar. İş akışı kolayca yönetilebilir, ancak zincirin iyi yapılandırılması gerekir. Demo # Dinlediğiniz için teşekkürler #Kaynaklar: Refactoring Guru\nÖrnekler Reposu: aimtune/design-patterns-examples\n","date":"7 Ekim 2024","permalink":"/tr/presentations/design-patterns-series/chain_of_responsibility/","section":"Presentations","summary":"Bu sunumda, Chain of Responsibility tasarım deseni ile isteklerin nasıl işleyiciler arasında dolaştırılarak işlendiğini inceleyeceğiz.","title":"Chain of Responsibility"},{"content":"","date":null,"permalink":"/tr/topics/design-patterns/","section":"Topics","summary":"","title":"Design Patterns"},{"content":"","date":null,"permalink":"/tr/topics/handlers/","section":"Topics","summary":"","title":"Handlers"},{"content":"","date":null,"permalink":"/tr/topics/oop/","section":"Topics","summary":"","title":"OOP"},{"content":"","date":null,"permalink":"/tr/presentations/","section":"Presentations","summary":"","title":"Presentations"},{"content":"","date":null,"permalink":"/tr/topics/software-design/","section":"Topics","summary":"","title":"Software Design"},{"content":"","date":null,"permalink":"/tr/topics/","section":"Topics","summary":"","title":"Topics"},{"content":"","date":null,"permalink":"/tr/topics/choreography/","section":"Topics","summary":"","title":"Choreography"},{"content":"","date":null,"permalink":"/tr/topics/event-driven-architecture/","section":"Topics","summary":"","title":"Event-Driven Architecture"},{"content":"","date":null,"permalink":"/tr/topics/fault-tolerance/","section":"Topics","summary":"","title":"Fault Tolerance"},{"content":"","date":null,"permalink":"/tr/topics/kubernetes/","section":"Topics","summary":"","title":"Kubernetes"},{"content":"","date":null,"permalink":"/tr/topics/mikroservisler/","section":"Topics","summary":"","title":"Mikroservisler"},{"content":"","date":null,"permalink":"/tr/topics/orchestration/","section":"Topics","summary":"","title":"Orchestration"},{"content":" Saga Pattern #\n(Bağımsız ve Hata Toleranslı İş Akışı Yönetimi) Photo by Microservices Architecture Pattern - SAGA # Saga Pattern\u0026rsquo;e Giriş #Saga, mikroservis tabanlı uygulamalarda uzun süreli ve birden fazla adımdan oluşan işlemleri yönetmek için kullanılan bir iş akışı yönetim desenidir.\nSaga\u0026rsquo;nın Amacı ve Faydaları # Saga, dağıtık sistemlerde uzun süreli işlemleri güvenli bir şekilde yönetmek için kullanılır. İşlemleri adımlara bölerek hata durumunda her bir adımın telafi edilmesini sağlar. Sistemin genel dayanıklılığını artırır ve hata yönetimini daha yapılandırılmış bir şekilde ele alır. Saga Pattern\u0026rsquo;in Temel Bileşenleri # Choreography Orchestration Compensation Error Handling Error Handling (Hata Yönetimi)\nHata yönetimi, Saga Choreography\u0026rsquo;de her adımın hata durumunda telafi işlemlerini tetiklemesiyle gerçekleştirilir. Merkezi bir kontrol olmadığı için servisler kendi hatalarını olay tabanlı bir yaklaşımla yönetir ve durumu geri alır.\nSaga Pattern\u0026rsquo;in Temel Bileşenleri # Event-Driven Communication Service Independence Real-Time Updates Distributed Transactions Event-Driven Communication (Olay Tabanlı İletişim)\nServisler arasında asenkron iletişim, olay tabanlı bir yapı ile sağlanır. Her servis, bir işlemi tamamladığında bir olay yayınlar ve bu olay, diğer servisler tarafından dinlenerek işlemlerin tetiklenmesini sağlar.\nService Independence (Servis Bağımsızlığı)\nChoreography, her servisin kendi iş mantığını bağımsız olarak yönetmesini sağlar. Bu yapı, servislerin birbirinden izole olmasını ve kendi başlarına çalışabilmelerini mümkün kılar, böylece sistemin esnekliği artar.\nReal-Time Updates (Gerçek Zamanlı Güncellemeler)\nOlay tabanlı iletişim sayesinde servisler gerçek zamanlı olarak birbirleriyle etkileşime geçer. Bu sayede, sistemdeki güncellemeler anında diğer servisleri tetikler ve hızlı tepki süreleri sağlar.\nDistributed Transactions (Dağıtık İşlemler)\nDağıtık işlemler, Saga Pattern ile adımlara bölünerek yönetilir. Her bir işlem adımı bağımsızdır ve hata durumunda telafi edici işlemlerle güvenilir bir şekilde geri alınabilir, bu da sistemin bütünlüğünü korur.\nChoreography vs Orchestration #Choreography ve Orchestration, Saga Pattern\u0026rsquo;in iki ana uygulama yöntemidir. Bu sunumda özellikle Choreography üzerine odaklanacağız.\nChoreography ve Orchestration Farkları # Choreography: Servisler olaylar aracılığıyla birbirleriyle konuşur, merkezi bir kontrol yoktur. Orchestration: Merkezi bir kontrol birimi (orchestrator) tüm süreci yönetir ve kontrol eder. Choreography Yapısının Özellikleri # Olay Tabanlı İletişim: Servisler arasında asenkron olaylar yoluyla iletişim kurulur, bu da sistemin daha hızlı tepki vermesini sağlar. Servislerin Bağımsızlığı: Her servis kendi sorumluluğunda olan işi yapar ve diğer servislerden bağımsız çalışır. Bu, sistemin esnekliğini ve ölçeklenebilirliğini artırır. Choreography Yapısının Özellikleri # Dağıtık Mimari için Uygunluk: Choreography, dağıtık sistemlerde merkezi bir yönetim olmadan iş akışlarını etkin bir şekilde yönetir. Servisler kendi işlemlerini yönetirken olay tabanlı bir akışla ilerler. Choreography\u0026rsquo;nin Avantajları # Merkezi kontrol birimi yoktur; servisler bağımsızdır. Olay tabanlı iletişim, hızlı ve gerçek zamanlı güncellemeler sağlar. Sistemin esnekliği ve ölçeklenebilirliği yüksektir. Choreography\u0026rsquo;nin Dezavantajları ve Zorlukları # Hata yönetimi karmaşıktır ve telafi işlemleri zor olabilir. Olayların izlenmesi ve yönetimi zordur (event storming). Servisler arasında beklenmeyen bağımlılıklar oluşabilir. Compensation İşlemleri (Compensable Transactions) # Başarısız adımları geri alarak sistemin önceki durumuna dönmesini sağlar. Telafi edici işlemler her adım için ayrı tanımlanır ve hata durumunda tetiklenir. Servisler bağımsız çalışırken kendi telafi işlemlerini yönetir. Hata Yönetimi # Hatalar olaylar aracılığıyla yönetilir ve her adımda telafi işlemleri tetiklenir. Olay tabanlı hata yönetimi, olayların doğru izlenmesini ve uygun yanıt verilmesini gerektirir. Özellikle karmaşık hata senaryoları için dikkatli bir planlama ve güçlü telafi işlemleri gereklidir. Demo # You found the speaker notes! Dinlediğiniz için teşekkürler #Kaynaklar: A\u0026rsquo;dan Z\u0026rsquo;ye Mikroservis Mimarisi Eğitimi - 1. Etap - ChatGPT\nÖrnekler Reposu: aimtune/distributed-systems-design-patterns-examples\n","date":"3 Eylül 2024","permalink":"/tr/presentations/distributed-system-series/saga-pattern-choreography/","section":"Presentations","summary":"Bu sunumda modern mikroservis mimarileri için güçlü bir iş akışı yönetimi deseni olan Saga\u0026rsquo;yı keşfedeceğiz. Sunumda değinilecek Saga konuları: Choreography (Koreografi), Orchestration (Orkestrasyon), Compensation (Telafi İşlemleri), Error Handling (Hata Yönetimi), Transaction Management (İşlem Yönetimi).","title":"Saga Choreography"},{"content":"","date":null,"permalink":"/tr/topics/saga-pattern/","section":"Topics","summary":"","title":"Saga Pattern"},{"content":"Elixir Nedir? #Elixir, fonksiyonel, eş zamanlı (concurrent) ve dağıtık programlama (distributed programming) için tasarlanmış, dinamik ve güçlü bir programlama dilidir. Elixir, özellikle yüksek performanslı, ölçeklenebilir (scalable) ve hata toleranslı (fault tolerance) sistemler geliştirmek için idealdir.1 2\nElixir, Erlang sanal makinesi (BEAM) üzerinde çalışır ve bu sayede güçlü concurrency (eşzamanlılık) özelliklerine sahiptir. Erlang (Ericsson Language), 1980\u0026rsquo;lerde Ericsson tarafından telekomünikasyon sistemleri için geliştirildi ve BEAM sanal makinesi, bu yüksek talepli sistemlerin gereksinimlerini karşılamak için optimize edildi.\nErlang ve Elixir HelloWorld Örnekleri #Erlang #-module(helloworld). -export([say_hello/0]). say_hello() -\u0026gt; io:format(\u0026#34;Hello, World!~n\u0026#34;). Elixir #defmodule HelloWorld do def say_hello do IO.puts(\u0026#34;Hello, World!\u0026#34;) end end HelloWorld.say_hello() Not: Elixir, aslında HelloWorld örneğinde olduğu gibi daha uzun değil, aksine daha kısa yazılabiliyor ve okunabilirlik konusunda da daha iyi. Temel Özellikler # Fonksiyonel Programlama: Elixir, fonksiyonel programlamayı destekler ve immutable (değişemeyen) veri yapıları ile çalışır. Bu, daha güvenli ve öngörülebilir kod yazmanızı sağlar. Örneğin aşağıda map, filter gibi fonksiyonlar zincir şeklinde birbirini pipe(|) işareti ile çağırıyolar ve her biri çıktısını bir sonraki fonksiyona girdi olarak veriyor: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 defmodule MyList do def process_list(list) do list |\u0026gt; Enum.map(\u0026amp;(\u0026amp;1 + 1)) |\u0026gt; Enum.filter(\u0026amp;rem(\u0026amp;1, 2) == 0) |\u0026gt; Enum.map(\u0026amp;(\u0026amp;1 * \u0026amp;1)) |\u0026gt; Enum.sum() end end # Kullanım list = [1, 2, 3, 4, 5] result = MyList.process_list(list) IO.puts(\u0026#34;Sonuç: #{result}\u0026#34;) Eş Zamanlı (Concurrent) ve Dağıtık Sistemler: Elixir, aynı anda birçok işlemi (process) verimli bir şekilde yürütebilir ve dağıtık sistemlerde mükemmel performans sergiler. Erlang VM (BEAM) üzerine inşa edildiği için bu özellikleri doğal olarak sunar. Erlang VM (BEAM): Elixir, Erlang sanal makinesi (BEAM) üzerinde çalışır ve bu sayede Erlang’ın sağlam ve hata toleransı özelliklerinden yararlanır. BEAM, hafif süreçleri (process) ve mesaj geçişini (message passing) destekleyen bir yapı sunar. Bu süreçler, işletim sistemi iş parçacıklarından çok daha hafif olup, binlerce hatta milyonlarca sürecin aynı anda çalıştırılmasını mümkün kılar. Erlang Scheduler, bu hafif süreçleri etkin bir şekilde yönetir ve her bir CPU çekirdeği için bir scheduler thread çalıştırır. Scheduler, süreçlerin adil bir şekilde çalıştırılmasını sağlar ve yüksek verimli bir yük dengeleme mekanizması sunar. Bu özellikler sayesinde, Elixir ile yazılan uygulamalar yüksek eşzamanlılık ve düşük gecikme süreleriyle mükemmel performans sergiler.\nPhoto by How to build fault-tolerant software systems Üretkenlik ve Bakım Kolaylığı: Modern dil özellikleri ve zengin standart kütüphaneleri ile Elixir, geliştiricilerin üretkenliğini artırır ve kodun bakımını kolaylaştırır. Hata Toleransı: Elixir, hata yönetimi konusunda güçlüdür ve sistemlerin kesintisiz çalışmasını sağlamak için “let it crash”3 felsefesini benimser bu da sistemlerin hata durumlarında hızlı bir şekilde toparlanmasını sağlar. 4 Ölçeklenebilirlik (Scalability): Elixir, yüksek ölçeklenebilirlik sunar ve aynı anda milyonlarca işlemi yönetebilir. Güvenilirlik (Reliability): Elixir, sağlam yapısı ve hata toleransı ile güvenilir sistemler geliştirmeyi sağlar. Dağıtık Sistemler (Distribution): Elixir, dağıtık sistemlerde mükemmel performans sergiler ve kolayca ölçeklendirilebilir. Hızlı Yanıt Verme (Responsiveness): Elixir, kullanıcılarınıza anında yanıt verebilen hızlı ve verimli sistemler oluşturmanıza imkan tanır. Canlı Güncellemeler (Live Update): Elixir, uygulamalarınızı kesinti olmadan güncelleyebilmenizi (deployment) sağlar. Yüksek Erişilebilirlik (High Availability): Elixir, yüksek erişilebilirlik gerektiren uygulamalarda mükemmel performans sunar. OTP ve GenServer: Elixir, yüksek performanslı, dağıtık ve hata toleranslı uygulamalar geliştirmek için kullanılan OTP (Open Telecom Platform) adlı bir kütüphane ve araç seti ile birlikte gelir. OTP\u0026rsquo;nin temel yapı taşlarından biri olan GenServer, süreçlerin yaşam döngüsünü ve mesajlaşmasını yönetir. GenServer, belirli işlevleri gerçekleştirmek ve durum bilgisi tutmak için kullanılır, bu da karmaşık iş mantıklarının kolayca yönetilmesini sağlar. Hex Paket Yöneticisi ve Mix: Hex, Elixir ve Erlang projeleri için kullanılan bir paket yöneticisidir. Hex, bağımlılıkları yönetmeyi, paylaşmayı ve Elixir kütüphanelerini kolayca yüklemeyi sağlar. Mix ise Elixir projelerini oluşturmak, derlemek, test etmek ve yönetmek için kullanılan güçlü bir araçtır. Mix, bağımlılık yönetimi, uygulama yapılandırması ve görev otomasyonu gibi işlevleri sağlar. Makrolar: Makrolar, Elixir\u0026rsquo;de kodunuzu derleme zamanında dönüştürmenizi ve genişletmenizi sağlayan güçlü araçlardır. Makrolar, kodunuzu daha dinamik ve esnek hale getirmenizi sağlar. Elixir\u0026rsquo;de makrolar defmacro anahtar kelimesi ile tanımlanır. Örneğin aşağıdaki örnekte5 Ecto kütüphanesiyle .NET\u0026rsquo;teki LINQ yapısına benzer bir sorgulama makrolar sayesinde yapılabilmiş. 1 2 3 4 5 6 7 8 9 10 # Imports only from/2 of Ecto.Query import Ecto.Query, only: [from: 2] # Create a query query = from u in \u0026#34;users\u0026#34;, where: u.age \u0026gt; 18, select: u.name # Send the query to the repository Repo.all(query) Kullanım Alanları #Erlang, özellikle telekomünikasyon sektöründe yüksek erişilebilirlik ve güvenilirlik gerektiren sistemlerde uzun yıllardır kullanılmaktadır. Ericsson, WhatsApp, Facebook ve RabbitMQ gibi büyük şirketler, yüksek performanslı ve dağıtık sistemlerini yönetmek için Erlang kullanmaktadır.6 Ayrıca Elixir\u0026rsquo;i de PEPSICO, Discord, Change.org, Heroku gibi firmalar kullanmaktadır.7 Elixir de Erlang temelli olduğundan çeşitli alanlarda kullanılabilir.\nÖrneğin:\nWeb Geliştirme: Phoenix framework ile birlikte kullanılarak yüksek performanslı web uygulamaları geliştirilebilir. Dağıtık Sistemler: Yüksek erişilebilirlik ve düşük gecikme süreleri gerektiren sistemlerde idealdir. Gerçek Zamanlı Uygulamalar: Anlık mesajlaşma, oyun sunucuları ve IoT uygulamaları gibi gerçek zamanlı sistemlerde kullanılır. Elixir, Erlang\u0026rsquo;ın güçlü yönlerini modern bir sözdizimi ve geliştirme deneyimi ile birleştirerek geliştiricilere sunar. Bu nedenle, Elixir telekomünikasyon, finans, sağlık ve e-ticaret gibi sektörlerde yüksek ölçeklenebilirlik ve düşük gecikme süreleri gerektiren uygulamalar için ideal bir seçimdir.\nElixir Kurulum Rehberi #Elixir programlama dilini bilgisayarınıza kurmak için aşağıdaki adımları takip edebilirsiniz. İşletim sisteminize göre farklı kurulum yöntemleri mevcuttur.\nMacOS Üzerine Elixir Kurulumu # Homebrew Paket Yöneticisini Kurun (Eğer Homebrew yüklü değilse): /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Elixir\u0026rsquo;i Homebrew ile Kurun: brew install elixir Ubuntu/Linux Üzerine Elixir Kurulumu # Paket Yöneticisini Güncelleyin: sudo apt-get update Elixir\u0026rsquo;i Kurun: sudo apt-get install erlang elixir Windows Üzerine Elixir Kurulumu # Erlang/OTP\u0026rsquo;yi İndirin ve Kurun:\nErlang/OTP İndir Elixir\u0026rsquo;i İndirin ve Kurun:\nElixir İndir Not: Ayrıca Windows\u0026rsquo;ta Elixir\u0026rsquo;i winget, choco gibi paket yöneticileriyle de kolay bir şekilde kurabilirsiniz. Kurulum Sonrası Kontroller #Elixir\u0026rsquo;in doğru bir şekilde kurulduğunu doğrulamak için terminal veya komut istemcisinde elixir -v komutunu çalıştırabilirsiniz. Bu komut Elixir\u0026rsquo;in kurulu olduğunu ve sürüm numarasını gösterecektir.\nelixir -v Çıktısı:\nErlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Elixir 1.12.2 (compiled with Erlang/OTP 24) Şimdi kurulumu başarılı bir şekilde yaptığımıza göre interaktif terminalini tanıyalım ve temel bilgileri öğrenmeye başlayalım.\nIEx Nedir ve Nasıl Kullanılır? #IEx (Interactive Elixir), Elixir kodlarını interaktif olarak çalıştırabileceğiniz bir kabuktur(shell). IEx, Elixir dilini öğrenmek ve hızlı bir şekilde kod denemeleri yapmak için ideal bir araçtır.\nIEx\u0026rsquo;in Temel Özellikleri # Interaktif Çalışma Ortamı: Elixir kodlarını doğrudan yazıp çalıştırabilirsiniz. Anında Geri Bildirim: Yazdığınız kodun çıktısını hemen görebilirsiniz. Gelişmiş Yardım Sistemi: Elixir modülleri ve fonksiyonları hakkında anında yardım alabilirsiniz. Gelişmiş Debugging ve Profiling: Kodunuzu adım adım çalıştırabilir ve performans analizleri yapabilirsiniz. IEx Nasıl Kullanılır? #IEx\u0026rsquo;i Başlatma #IEx’i başlatmak için terminal veya komut istemcisinde iex komutunu yazmanız yeterlidir:\niex Sizi şöyle bir ekran karşılayacaktır:\nErlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help) iex(1)\u0026gt; Örneğin bir toplama işlemi yapalım ve sonucunu alalım. #Erlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help) iex(1)\u0026gt; 1+1 2 iex(2)\u0026gt; Yardım Alma #IEx, Elixir modülleri ve fonksiyonları hakkında yardım almanızı sağlar. Yardım almak için h komutunu kullanabilirsiniz. Örneğin IO.puts fonksiyonu hakkında bilgi alalım:\niex(2)\u0026gt; h IO.puts def puts(device \\\\ :stdio, item) @spec puts(device(), chardata() | String.Chars.t()) :: :ok Writes item to the given device, similar to write/2, but adds a newline at the end. By default, the device is the standard output. It returns :ok if it succeeds. ## Examples IO.puts(\u0026#34;Hello World!\u0026#34;) #=\u0026gt; Hello World! IO.puts(:stderr, \u0026#34;error\u0026#34;) #=\u0026gt; error iex(3)\u0026gt; IEx\u0026rsquo;den Çıkma #IEx kabuğundan çıkmak için aşağıdaki yöntemleri kullanabilirsiniz:\nCTRL+C Tuş Kombinasyonu: İki kez CTRL+C tuş kombinasyonunu uygulayın.\nSystem.halt/0 Fonksiyonu: System.halt() fonksiyonunu çalıştırın.\niex\u0026gt; System.halt() Not: \u0026rsquo;/0\u0026rsquo; bu fonksiyonun parametresiz halini kullanabileceğimizi göstermektedir. Parametre sayısına göre slash işaretinin yanındaki sayı değişebilir. Daha fazla özelliğe farklı bölümlerde ayrıca değineceğiz şimdilik temeller için bunları bilmek yeterli olacaktır.\nElixir in Action Second Edition by Saša Jurić\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChatGPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLet It Crash\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nErlang “Let it Crash” Approach to Building Reliable Services\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEcto.Query\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nWho uses Erlang for product development?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCompanies using Elixir in production\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"30 Temmuz 2024","permalink":"/tr/series/elixir/1-temel-elixir-bilgisi/","section":"Series","summary":"Bu yazımızda, Elixir programlama dilinin temel özelliklerine odaklanıyoruz. Fonksiyonel programlama yaklaşımını benimseyen Elixir, dağıtık sistemler ve yüksek performanslı uygulamalar geliştirmek için ideal bir dil olarak dikkat çekiyor. Erlang VM üzerinde çalışarak hata toleransı, ölçeklenebilirlik ve yüksek hız sunan Elixir, modern yazılım geliştirme süreçlerinde önemli bir rol üstleniyor. Yeni başlayanlar için Elixir\u0026rsquo;in temel bilgilerini ve kurulum adımlarını detaylıca ele alıyoruz.","title":"1 - Elixir nedir? Nasıl Kurulur ve Kullanılır"},{"content":"","date":null,"permalink":"/tr/tags/elixir/","section":"Tags","summary":"","title":"Elixir"},{"content":" Bu serimizde Elixir dili hakkında yaptığım araştırmalar ve sonucunda aldığım notları aktarmaya çalıştım. ","date":null,"permalink":"/tr/series/elixir/","section":"Series","summary":"Bu serimizde Elixir dili hakkında yaptığım araştırmalar ve sonucunda aldığım notları aktarmaya çalıştım.","title":"Elixir"},{"content":"","date":null,"permalink":"/tr/categories/elixir-serisi/","section":"Categories","summary":"","title":"Elixir-Serisi"},{"content":"","date":null,"permalink":"/tr/tags/erlang/","section":"Tags","summary":"","title":"Erlang"},{"content":"","date":null,"permalink":"/tr/topics/cross-cutting-concerns/","section":"Topics","summary":"","title":"Cross Cutting Concerns"},{"content":"","date":null,"permalink":"/tr/topics/dapr/","section":"Topics","summary":"","title":"Dapr"},{"content":" Dapr #(Distributed Application Runtime)\nDapr\u0026rsquo;a Giriş #Dapr, mikroservis tabanlı uygulamaların geliştirilmesini ve çalıştırılmasını kolaylaştıran, open-source bir sidecar ürünüdür.\nSidecar Pattern Nedir? #Sidecar Pattern, yardımcı bir bileşenin (sidecar) ana uygulamaya eklenmesiyle (container veya process), uygulamanın iş mantığına müdahale etmeden ortak görevlerin yürütülmesini sağlar. Güvenlik, logging ve dinamik yapılandırma gibi cross cutting concerns\u0026rsquo;leri yönetmek için idealdir.\nCross Cutting Concerns Nedir? #Cross cutting concerns, yazılım sisteminde birçok modül veya katmanda ortak olan ve tekrarlanan fonksiyonel özelliklerdir. Güvenlik, logging, hata yönetimi, performans izleme gibi konular bu kapsamda değerlendirilir. Bunlar, sistemin bakımını ve genişletilebilirliğini artırır.\nSidecar Pattern\u0026rsquo;in Avantajları # Yardımcı hizmetleri izole eder. Uygulamanın modülerliğini ve yeniden kullanılabilirliğini artırır. Yönetimi ve bakımı kolaylaştırır. Örnek Sidecar: Resiliency (Dayanıklılık) # Resiliency, bir sistemin hatalardan kurtulma ve hizmet vermeye devam etme yeteneğidir. Sidecar kullanarak bir mikroservise resiliency özellikleri\neklemek, özellikle ağ hataları veya diğer geçici sorunlar durumunda hizmet sürekliliğini sağlamak için etkilidir. Bu sidecar, otomatik yeniden deneme\n(retry), devre kesici (circuit breaker) ve zaman aşımı (timeout) gibi dayanıklılık desenlerini uygular. Örnek Sidecar: Resiliency (Dayanıklılık) # Bizler de sidecar\u0026rsquo;larda örneği uygulamamıza gelen trafiği sadece sidecar üstünden alabiliriz ve gelen istekleri sidecar içerisinde resiliency görevi\ngörecek kodlardan geçiririz ve uygulamamızın ayakta olmadığı durumda resiliency policy\u0026rsquo;lerine göre tekrar istek atma veya istek durdurma sürecine geçer. Dapr\u0026rsquo;ın Amacı ve Faydaları # Uygulama mantığını değiştirmeden dağıtılmış sistemlerin yaygın ihtiyaçlarını karşılamak için çeşitli yapı taşları (building blocks) ve birçok farklı özellik sunar. HTTP ve gRPC protokolleri üzerinden çalışarak çoklu programlama dilleriyle uyumluluk sunar. Kolay programlayabilmek için birçok farklı dilde SDK\u0026rsquo;ları vardır. Dapr\u0026rsquo;ın Temel Bileşenleri # Service Invocation* # State Management* # Secrets Management* # Configuration* # Dapr\u0026rsquo;ın Temel Bileşenleri # Pub/Sub Messaging # Bindings # Distributed lock # Cryptography # Actors # Workflow # Dapr\u0026rsquo;ın Diğer Özellikleri #\nResiliency* #Hata toleransı sağlamak için zaman aşımı, yeniden deneme, devre kesici ve geri çekilme gibi politikalar tanımlamayı ve uygulamayı destekler.\nDapr\u0026rsquo;ın Diğer Özellikleri #\nObservability #Open Telemetry ve Zipkin gibi protokollerle izleme verilerini toplar ve birçok gözlemlenebilirlik aracıyla entegrasyon sağlar.\nDapr\u0026rsquo;ın Diğer Özellikleri #\nSecurity #Varsayılan olarak etkin güvenlik özellikleri sunar, API\u0026rsquo;lar, servisler ve bileşenler için uygulamaya özel politikalar ayarlama imkanı sağlar. İletişim mTLS ile otomatik olarak şifrelenir.\nService Invocation # Mikroservisler arası iletişim sağlar. HTTP veya gRPC ile çalışır. Servis keşfi ve yük dengeleme özellikleri içerir. Servislerdeki iletişimde araya girdiği için security, resiliency, observability gibi yapıları da bu istekler çalıştığı anda uygulayabilir. State Management #Uygulamalarda durum (state) kalıcılığı sağlar.\nKey/value tabanlı durum depolamada görev alır.\nFarklı ürünler ile entegre edilebilir (Redis, MongoDB, SQLs*, In-Memory, etcd, vb…).\nState Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Secrets Management #Güvenlik açısından hassas bilgilerin korunmasını sağlar.\nŞifreler, API anahtarları, güvenlik sertifikaları gibi gizli bilgilerin yönetimini içerir.\nErişim kontrolü ve şifreleme kullanılarak güvenli bir şekilde saklanır ve erişilir.\nFarklı ürünler ile entegre edilebilir (Azure Key Vault, AWS Secrets Manager, HashiCorp Vault, vb.).\nSecrets Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Configuration Management #Uygulamanın çalışma şeklini belirleyen ayarların yönetimini sağlar.\nUygulama ayarları, çevresel değişkenler ve yapılandırma dosyalarını içerir.\nUygulama yeniden başlatılmadan veya kod değiştirilmeden kolayca güncellenebilir.\nFarklı ürünler ile entegre edilebilir (Redis, Consul, Kubernetes ConfigMaps, Azure App Configuration vb.).\nConfiguration Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Demo # You found the speaker notes! Dinlediğiniz için teşekkürler #Kaynaklar: dapr.io - ChatGPT\nÖrnekler Reposu: aimtune/dapr-examples\n","date":"28 Temmuz 2024","permalink":"/tr/presentations/dapr-series/dapr-1/","section":"Presentations","summary":"Bu sunumda modern mikroservis mimarileri için güçlü bir sidecar aracı olan \u003cstrong\u003eDapr\u003c/strong\u003e\u0026lsquo;ı (Distributed Application Runtime) keşfedeceğiz. Sunumda değinilecek Dapr konuları: \u003cstrong\u003eService Invocation\u003c/strong\u003e (Servis Çağırma), \u003cstrong\u003eState Management\u003c/strong\u003e (Durum Yönetimi), Secrets Management (Gizli Veri Yönetimi), \u003cstrong\u003eConfiguration\u003c/strong\u003e (Yapılandırma), \u003cstrong\u003eResiliency\u003c/strong\u003e (Dayanıklılık).","title":"Dapr Bölüm 1"},{"content":"","date":null,"permalink":"/tr/topics/javascript/","section":"Topics","summary":"","title":"JavaScript"},{"content":"","date":null,"permalink":"/tr/topics/node.js/","section":"Topics","summary":"","title":"Node.js"},{"content":"","date":null,"permalink":"/tr/topics/redis/","section":"Topics","summary":"","title":"Redis"},{"content":"","date":null,"permalink":"/tr/topics/sidecar-pattern/","section":"Topics","summary":"","title":"Sidecar Pattern"}]