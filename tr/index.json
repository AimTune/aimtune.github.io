[{"content":" OpenTelemetry Nedir? # Open açık kaynak olmasını, Tele uzaktan yapabilmesini ve Metry (Metron) ölçümü temsil eder. Bir gözlemlenebilirlik (observability) framework’üdür\nLog, trace ve metrics verilerini platform bağımsız, standart bir formatta üreterek istenilen hedefe aktarabilmeyi sağlar.\nHer dilin kütüphanesi farklı veri formatları oluşturabilirken, OpenTelemetry bu verileri tek bir standarda oturtur.\nOpenTelemetry Nedir? # CNCF (Cloud Native Computing Foundation) tarafından desteklenir ve APM araçlarından bağımsız çalışır.\nOTLP protokolü sayesinde endüstri standartlarında veri toplayabilir.\nJaeger ve Zipkin gibi araçlarla uyumlu çalışarak kapsamlı bir gözlemlenebilirlik çözümü sunar.\nAPM (Application Performance Monitoring) Araçları # Jaeger ve Zipkin: Özellikle tracing için kullanılan açık kaynaklı platformlardır. OpenTelemetry\u0026rsquo;le uyumludurlar.\nJaeger: Cassandra ve Elasticsearch gibi veri depolarını destekler.\nZipkin: Tracing tarafında yine popüler açık kaynak bir çözümdür.\nÖzellikle bu iki araç log verisi istemezler; daha çok trace odaklı çalışırlar.\nAPM (Application Performance Monitoring) Araçları # Elastic APM: Elastic tarafından geliştirilen bir Application Performance Monitoring çözümüdür. Uygulamaların performansını, hatalarını ve işlemler arasındaki gecikmeleri izleyebilmek için distribute tracing, log analizi ve metrik toplama özelliklerini bir arada sunar. APM (Application Performance Monitoring) Araçları # New Relic: SaaS tabanlı bir Application Performance Monitoring platformudur. Anlık performans metrikleri, hata takibi ve gelişmiş analiz araçları sunarak uygulamanızın uçtan uca izlenmesini sağlar. Kod seviyesinde detaylı tracing, kullanılabilirlik ölçümleri, gecikme analizleri gibi özelliklerle performans sorunlarını hızlıca tespit etmeye yardımcı olur. APM (Application Performance Monitoring) Araçları # Application Insights: Microsoft Azure ekosisteminin bir parçası olan Application Insights, canlı uygulamaların performans ve kullanım verilerini izlemek için kullanılan bir APM hizmetidir. Kullanıcı davranışlarını, istek performansını ve hataları gerçek zamanlı olarak takip etmeyi sağlar. Ayrıca, Azure’un diğer hizmetleriyle entegre çalışarak merkezi izleme, uyarı mekanizmaları ve veri analizi imkanları sunar. APM (Application Performance Monitoring) Araçları # Bu tüm araçlarg genellikle önce gelen veri paketlerini kaydeder, sonrasında da indexleyerek sorgulanabilir ve görselleştirilebilir hale getirir. Trace Data Nedir? # Tracing, logların daha özelleşmiş bir formudur ve uygulamada meydana gelen olayları daha detaylı biçimde gösterir. Bu sayede performansla ilgili problemleri, hangi adımda gecikme yaşandığını ve işlemlerin genel gidişatını inceleyebilirsiniz. .NET 5 öncesindeki projelerde, System.Diagnostic.DiagnosticSource paketine ihtiyaç duyulur. Trace Data İçeriği #Bir trace, uygulamanın farklı katmanları veya bileşenleri arasındaki etkileşimleri ayrıntılı bir şekilde gösterir. Örneğin:\nHTTP Request: İsteğin gönderilme ve alınma süresi. HTTP Response: Dönen cevabın içeriği ve genel yanıt süresi. Trace Data İçeriği # Veritabanı İşlemleri (DB): Komutların (query, insert, update vb.) ne kadar sürdüğü ve hangi tabloların etkilendiği. Başka Bir API\u0026rsquo;ye Çağrı (Another API): Harici servis veya mikroservis iletişimi. Metot Çağrıları (Method): Metot içerisinde gerçekleşen adımlar, parametreler ve süre bilgisi. Queue İşlemleri (Queue): Sıralarda bekleyen mesajlar, gönderim ve tüketim süreleri. Trace Data İçeriği #Bu veriler, tek bir zincir (trace) üzerinde segmentler (span) şeklinde toplanır ve böylelikle uçtan uca bir görünürlük elde etmenizi sağlar.\n","date":"1 Ocak 1","permalink":"/tr/presentations/distributed-system-series/observability/opentelemetry/","section":"Presentations","summary":"OpenTelemetry Nedir? # Open açık kaynak olmasını, Tele uzaktan yapabilmesini ve Metry (Metron) ölçümü temsil eder. Bir gözlemlenebilirlik (observability) framework’üdür\nLog, trace ve metrics verilerini platform bağımsız, standart bir formatta üreterek istenilen hedefe aktarabilmeyi sağlar.\nHer dilin kütüphanesi farklı veri formatları oluşturabilirken, OpenTelemetry bu verileri tek bir standarda oturtur.\nOpenTelemetry Nedir? # CNCF (Cloud Native Computing Foundation) tarafından desteklenir ve APM araçlarından bağımsız çalışır.\nOTLP protokolü sayesinde endüstri standartlarında veri toplayabilir.","title":""},{"content":" Kurulum # Bu paketleri yüklüyoruz.\nConsole Demo # Console Demo # OpenTelemetry\u0026rsquo;deki Temel Kavramlar # Resource Nedir ve Nasıl Yapılandırılır? #OpenTelemetry’de Resource, hangi servis veya uygulamanın veri ürettiğini tanımlayan ve telemetri (Trace, Metrics, Logs) verilerine bağlam kazandıran meta bilgileri içerir. Bu sayede, ürettiğiniz verilerin hangi servis tarafından, hangi sürümde, hangi ortamda (örn. dev, preprod, prod) veya hangi instance (kopya) üzerinden geldiğini anlayabilirsiniz.\nResource Üzerinde Tanımlanabilen Bilgiler # Service Name\nUygulama veya servisin adı. (Örneğin: PaymentService) Service Version\nUygulamanın hangi sürümünün çalıştığını belirtir. (Örneğin: 1.0.0) Resource Üzerinde Tanımlanabilen Bilgiler # Namespace\nBir uygulama veya servis ailesinin/alanının adı olarak düşünebilirsiniz. (Örneğin: MyCompanyName.PaymentSystem) Instance\nServisin belirli bir kopyası. (Örneğin: payment-service-instance-2) Resource Üzerinde Tanımlanabilen Bilgiler # Deployment Environment (örn. dev, preprod, prod) Static property olarak veya değişken üzerinden tanımlayabilirsiniz. Böylece telemetri verilerinin hangi ortamdan geldiği kolayca anlaşılır. Örnek Resource Tanımı #var tracerProvider = Sdk.CreateTracerProviderBuilder() .SetResourceBuilder( ResourceBuilder.CreateDefault() .AddService( serviceName: \u0026quot;PaymentService\u0026quot;, serviceVersion: \u0026quot;1.0.0\u0026quot;) .AddAttributes(new Dictionary\u0026lt;string, object\u0026gt; { [\u0026quot;deployment.environment\u0026quot;] = \u0026quot;dev\u0026quot;, // Ortam bilgisi [\u0026quot;service.instance.id\u0026quot;] = \u0026quot;instance-001\u0026quot; // Instance }) ) // Exporter vb. diğer ayarlar .AddConsoleExporter() .Build(); AgentSource (TraceProvider) # Tanım: Uygulamada trace verilerinin üretildiği ana sınıflardır. Amaç: Trace verilerini oluşturarak, hangi işlemlerin ne kadar sürdüğünü ve hangi bileşenler arasında gerçekleştiğini izlememizi sağlar. AgentSource (TraceProvider) # Tasarım: Static veya Singleton şeklinde tasarlanmalıdır, böylece uygulama içinde merkezi ve tutarlı bir yerden yönetilebilir. Benzer şekilde, namespace yapısını kullanarak farklı traceleri mantıksal olarak ayırabilir veya gruplandırabilirsiniz. AgentSource (TraceProvider) # Faydalar: Uygulamanın belirli kısımlarından veya mikroservislerden üretilen verileri daha düzenli takip etme olanağı sunar. Tek noktada konfigüre edildiğinden, kaynak yönetimi (örneğin, tek bir Tracer Provider üzerinden farklı bileşenlerin izlenmesi) kolaylaşır. Şeffaf gözlemlenebilirlik elde etmeye yardımcı olur, çünkü tüm izleme (tracing) aktiviteleri ortak bir kayıt noktası üzerinden yönetilir. Activity (Span) # Uygulamadaki her bir operasyon, bir span (örneğin: HTTP isteği, veritabanı çağrısı, dosya yazma) şeklinde temsil edilir. Bu span’lerin bir araya gelmesiyle bir trace (işlem bütünlüğü) oluşur. Span İçeriği # Start-end time: Span’in başlama ve bitiş zamanı Success-failure: İşlemin başarılı mı yoksa hatalı mı sonuçlandığı Span kind: Span’in rolü (client, server, consumer, producer, internal) Attributes/Tags: Operasyona dair ek bilgiler (örn. kullanıcı kimliği, sürüm bilgisi vb.) Events: Span sürecindeki belirli olaylar veya kontrol noktaları (checkpoints) Span ve Trace Arasındaki İlişki # Span: Tek bir operasyonu temsil eder. Trace: Birden fazla span’in birleşerek oluşturduğu, uçtan uca bütün bir işlemi ifade eder. Activity (Span) Kind # Internal: Uygulama içindeki dahili bir işlemi ifade eder. Server: İstekleri sunucu tarafında karşılayan veya işleyen taraftır. Client: Dış bir kaynağa veya hizmete istek gönderen taraftır. Producer: Mesaj veya veri üreterek bir kuyruğa, topic’e veya başka bir yere yayımlayan taraftır. Consumer: Yayınlanmış mesajları veya event’leri alan ve işleyen taraftır. Event # Event, bir span’in (Activity) içerisindeki belirli bir olayı veya noktayı temsil eder. Log benzeri bir yapısı olsa da in-memory tutulduğu için (doğrudan bellekte saklanır), çok sık kullanılması yüksek maliyet doğurabilir. Örneğin, “Bu dosyayı oluşturdum, boyutu 50 KB” şeklindeki bir bilgiyi Event olarak ekleyebilirsiniz. Activity(Span) Status #Bir span’in durumunu belirlemek için üç temel Status tipi vardır:\nOk Error Unset Başarısız bir işlem (ör. istisna, hata kodu) oluştuğunda span durumunu Error olarak ayarlayabilirsiniz.\nTag (Attributes) # Span’e ek bilgi (metadata) eklemek için kullanılır. Örnek: Sipariş ID, kullanıcı ID, işlem türü gibi bilgileri, span ile ilişkilendirerek daha ayrıntılı takip edebiliriz. İleride analiz yaparken veya sorun giderirken, bu etiketler sayesinde hangi işlemin hangi kullanıcı veya siparişle ilgili olduğunu hızlıca bulabilirsiniz. Correlations (In-Process) # Bir uygulama içindeki veya farklı servisler arasındaki span’lerin birbirine bağlı olduğu durumu ifade eder. İstek, bir servis/uygulamadan diğerine aktarıldığında, traceId paylaşılır ve böylece bütün istek zinciri aynı iz (trace) altında toplanır. Bu sayede APM (Application Performance Monitoring) araçlarında tek bir iz (trace) içerisinde, çoklu servis ve işlem adımlarını uçtan uca takip edebilirsiniz. Activity.Current # Tanım: .NET uygulamalarında halihazırda etkin (aktif) olan Activity nesnesine (span) erişim sağlar. Kullanım: Aşağıdaki örnek, Activity.Current üzerinden mevcut işlem (span) bilgisini elde etmeye yarar. Örneğin, etiket eklemek veya durum güncellemesi yapmak istediğinizde Activity.Current?.SetTag(\u0026quot;key\u0026quot;, \u0026quot;value\u0026quot;) şeklinde çağrı yapabilirsiniz. Activity.Current # Örnek Senaryo: Bir HTTP isteği geldiğinde, yeni bir Activity başlatılır (veya otomatik başlatılır). Bu süreçte, Activity.Current o anki isteği temsil eden span’i gösterir. Ek etiketler, event’ler veya hata durumlarıyla ilgili kayıtlar bu aktif Activity üzerinden yapılır. Önemli Not: Activity.Current, her zaman aktif bir işlem (span) olmayabilir. Bu nedenle, kod yazarken null durumlarını dikkate almak gereklidir.\nActivityListener # Tanım: .NET uygulamalarında, oluşturulan veya bitirilen Activity (yani Span) nesnelerini dinlemek (listen) ve yönetmek için kullanılan bir mekanizmadır. Amaç: Uygulamada hangi Activity’lerin (işlemlerin) izlenmesi, örneğin hangilerinin kaydedilmesi veya kaydedilmemesi gerektiğine karar vermenizi sağlar. ActivityListener # Nasıl Çalışır: ActivityListener nesnesi oluşturulur. İlgili geribildirim (callback) yöntemleri tanımlanır, örneğin: ShouldListenTo (hangi ActivitySource’ları dinlemek istediğimizi belirtir) Sample (hangi Activity’lerin başlatılıp başlatılmayacağına karar verir) ActivityStarted/ActivityStopped (bir Activity başladığında veya bittiğinde çalışacak event metodları) Bu listener, ActivitySource nesnesine veya genel ActivitySource.AddActivityListener(activityListener) gibi bir API üzerinden eklenir. Örnek Kullanım #using System; using System.Diagnostics; public class ActivityListenerExample { public static void SetupListener() { var listener = new ActivityListener { // Hangi ActivitySource'ları dinleyeceğimize karar veriyoruz. ShouldListenTo = (activitySource) =\u0026gt; { // Örneğin, \u0026quot;MyCompany.MyApp\u0026quot; adındaki ActivitySource’lara izin ver return activitySource.Name.Contains(\u0026quot;MyCompany.MyApp\u0026quot;); }, // Activity oluşturulmadan önce “örnekleme” kararı veriyoruz (ör. kaydetsin mi kaydetmesin mi). Sample = (ref ActivityCreationOptions\u0026lt;ActivityContext\u0026gt; options) =\u0026gt; { // Belli bir mantığa göre (ör. rastgele yüzdelik, environment bilgisi vb.) karar verebilirsiniz. // Örnekte tüm Activity'leri kaydediyoruz: return ActivitySamplingResult.AllDataAndRecorded; }, // Activity başladığında çalışacak callback ActivityStarted = activity =\u0026gt; { Console.WriteLine($\u0026quot;Activity Started: {activity.DisplayName}\u0026quot;); }, // Activity bittiğinde çalışacak callback ActivityStopped = activity =\u0026gt; { Console.WriteLine($\u0026quot;Activity Stopped: {activity.DisplayName}\u0026quot;); } }; // Listener'ı default ActivitySource'a ekliyoruz. ActivitySource.AddActivityListener(listener); } } Bu Örnekte # ShouldListenTo: Hangi ActivitySource’ları dinlemek istediğimizi belirtiyoruz. Sample: Hangi Activity’lerin gerçekten oluşturulacağını veya kaydedileceğini kontrol edebiliyoruz. ActivityStarted ve ActivityStopped: Oluşturulan Activity’lerin başlangıç ve bitiş anlarında özel işlem yapabiliyoruz (örnek olarak konsola yazma). Neden Önemli? # Filtreleme: Çok fazla Activity oluşturulduğunda, dinlemek istediklerimizi kısıtlayarak sistem yükünü azaltabilirsiniz. Merkezi Yönetim: Tracing mantığını uygulamanın çeşitli yerlerine serpmek yerine, tek bir noktadan (ActivityListener) yönetebilirsiniz. Neden Önemli? # Esneklik: Gerçek zamanlı olarak hangi span’lerin kaydedilmesi gerektiğini değiştirerek (örneğin, hata modunda tüm tracing’i aktif hale getirerek) sistem davranışını dinamik olarak ayarlayabilirsiniz. İnce Ayar: Özel mantıklar (ör. belirli bir kullanıcıya veya siparişe ait Activity’leri kaydetme) tanımlayarak ince düzeyde kontrol sağlayabilirsiniz. ","date":"1 Ocak 1","permalink":"/tr/presentations/distributed-system-series/observability/opentelemetry-net/","section":"Presentations","summary":"Kurulum # Bu paketleri yüklüyoruz.\nConsole Demo # Console Demo # OpenTelemetry\u0026rsquo;deki Temel Kavramlar # Resource Nedir ve Nasıl Yapılandırılır? #OpenTelemetry’de Resource, hangi servis veya uygulamanın veri ürettiğini tanımlayan ve telemetri (Trace, Metrics, Logs) verilerine bağlam kazandıran meta bilgileri içerir. Bu sayede, ürettiğiniz verilerin hangi servis tarafından, hangi sürümde, hangi ortamda (örn. dev, preprod, prod) veya hangi instance (kopya) üzerinden geldiğini anlayabilirsiniz.\nResource Üzerinde Tanımlanabilen Bilgiler # Service Name","title":""},{"content":" Jaeger ve Elastic APM Kurulumu #Aşağıda, hem Jaeger hem de Elastic APM için temel kurulum örneklerini bulabilirsiniz. Bu örnekler, hızlı bir şekilde lokal ortamda çalıştırmak veya test amaçlı yapılandırmak içindir. Üretim ortamına uygun daha detaylı kurulumlar için resmi dokümanları inceleyebilirsiniz.\n1. Jaeger Kurulumu #Docker Compose ile Jaeger’i hızlıca çalıştırmak için örnek bir docker-compose.yml dosyası:\nversion: '3' services: jaeger: image: jaegertracing/all-in-one:1.21 environment: - COLLECTOR_ZIPKIN_HOST_PORT=:9411 # Zipkin HTTP endpoint'i için kullanılan port ayarı (9411). ports: - \u0026quot;16686:16686\u0026quot; # Jaeger web arayüzü - \u0026quot;4317:4317\u0026quot; # OTLP Collector (gRPC) - \u0026quot;4318:4318\u0026quot; # OTLP Collector (HTTP) - \u0026quot;14250:14250\u0026quot; # Collector (model.proto) - \u0026quot;14268:14268\u0026quot; # Collector (jaeger.thrift) - \u0026quot;14269:14269\u0026quot; # Collector (SPM) - \u0026quot;9411:9411\u0026quot; # Collector (Zipkin) 2. Elastic APM Stack Kurulumu #version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0 container_name: elasticsearch environment: - discovery.type=single-node - xpack.security.enabled=false ports: - \u0026quot;9200:9200\u0026quot; kibana: image: docker.elastic.co/kibana/kibana:8.9.0 container_name: kibana environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 - xpack.security.enabled=false ports: - \u0026quot;5601:5601\u0026quot; depends_on: - elasticsearch apm-server: image: docker.elastic.co/apm/apm-server:8.9.0 container_name: apm-server environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 - output.elasticsearch.enabled=true - output.elasticsearch.hosts=[\u0026quot;elasticsearch:9200\u0026quot;] - apm-server.secret_token=some_secret_token - xpack.security.enabled=false ports: - \u0026quot;8200:8200\u0026quot; depends_on: - elasticsearch ","date":"1 Ocak 1","permalink":"/tr/presentations/distributed-system-series/observability/opentelemetry-devops/","section":"Presentations","summary":"Jaeger ve Elastic APM Kurulumu #Aşağıda, hem Jaeger hem de Elastic APM için temel kurulum örneklerini bulabilirsiniz. Bu örnekler, hızlı bir şekilde lokal ortamda çalıştırmak veya test amaçlı yapılandırmak içindir. Üretim ortamına uygun daha detaylı kurulumlar için resmi dokümanları inceleyebilirsiniz.\n1. Jaeger Kurulumu #Docker Compose ile Jaeger’i hızlıca çalıştırmak için örnek bir docker-compose.yml dosyası:\nversion: '3' services: jaeger: image: jaegertracing/all-in-one:1.21 environment: - COLLECTOR_ZIPKIN_HOST_PORT=:9411 # Zipkin HTTP endpoint'i için kullanılan port ayarı (9411).","title":""},{"content":" Instrumentations Nedir? #Instrumentations, bir uygulamanın belirli bölümlerini (ör. ASP.NET Core, HttpClient, Entity Framework, Redis, RabbitMQ) otomatik olarak izlenebilir hâle getiren bileşenler veya kütüphanelerdir. Bu sayede, uygulamanızın farklı katmanlarında (ör. web istekleri, veri tabanı işlemleri, mesaj kuyruğu vb.) gerçekleşen olaylar ve performans metrikleri otomatik olarak toplanır ve kaydedilir.\nNeden Gerekli? Uygulamanın kritik noktalarını (API çağrıları, veritabanı sorguları, mesaj kuyruğu işlemleri vb.) tek tek manuel kodlamadan izlemeye olanak tanır. Performans sorunlarını veya hataları hızlı bir şekilde tespit edip kök neden analizi (root cause analysis) yapmak kolaylaşır. Nasıl Çalışır? Geliştiriciler, ilgili instrumentation paketini projeye ekler (NuGet). Uygulamaya, konfigürasyonla hangi bileşenlerin izleneceği belirtilir (AddAspNetCoreInstrumentation, AddHttpClientInstrumentation, vb.). Toplanan veriler, tercihe göre Jaeger, Zipkin, Elastic APM gibi dış araçlara veya konsola gönderilir (export edilir). Özetle: Instrumentations, uygulamanızdaki karmaşık işlemleri elle uğraşmadan otomatik olarak ölçümleyerek daha kolay gözlemleme (observability) sağlar.\nÖncelikle bu paketleri yüklüyoruz.\nInstrumentations #Aşağıda .NET projelerinde sıkça kullanılan instrumentation (izleme/ölçüm) seçeneklerini özetliyoruz. Bu bileşenler, OpenTelemetry veya benzeri kütüphaneler aracılığıyla uygulamanın önemli noktalarını (HTTP istekleri, veritabanı işlemleri, mesaj kuyruğu işlemleri vb.) otomatik veya yarı otomatik bir şekilde izlenebilir hâle getirir.\n1. ASP.NET Core Instrumentation # Amaç: ASP.NET Core uygulamanızın HTTP isteklerinin süresini, yanıt kodlarını ve performansını otomatik olarak ölçmek. Neler Ölçülür? Giden/gelen HTTP istekleri İstek başlama ve bitiş zamanı Yanıt durum kodu (ör. 200, 404, 500) İstek başlıkları ve yol (endpoint) bilgileri 1. ASP.NET Core Instrumentation # Fayda: Uygulamanıza ek middleware eklemeden, out-of-the-box izleme alabilirsiniz. Hangi endpoint’lerin ne kadar sıklıkla ve hangi sürelerde çalıştığını görebilirsiniz. 2. HttpClient Instrumentation # Amaç: Uygulamanız içindeki HttpClient çağrılarını izlemek ve performans sorunlarını tespit etmek. Neler Ölçülür? Yapılan dış istek (URL), metot (GET, POST vb.) Başlangıç ve bitiş zamanı Yanıt kodu ve süresi (latency) 2. HttpClient Instrumentation # Fayda: Mikroservisler veya harici API’lere yapılan çağrıları kolayca takip edersiniz. Yanıt süresi uzun mu, hatalar hangi oranda gerçekleşiyor vb. sorulara yanıt bulabilirsiniz. 3. Entity Framework Instrumentation # Amaç: Entity Framework (EF Core) ile yapılan veritabanı işlemlerini (sorgu, ekleme, güncelleme) otomatik olarak izlemek. Neler Ölçülür? Oluşturulan sorgular (SQL) Her sorgunun çalışma süresi (latency) Hata durumu (ör. time-out, bağlantı hatası) 3. Entity Framework Instrumentation # Fayda: Veritabanı katmanındaki performans darboğazlarını (örneğin uzun süren sorgular) kolayca tespit edebilirsiniz. Tracing üzerinden hangi üst işlem (HTTP istek, background job vb.) sırasında bu sorguların tetiklendiğini görebilirsiniz. 4. Redis Instrumentation # Amaç: Redis kullanımıyla ilgili performans ve hata gözlemlemek (GET, SET, Publish/Subscribe vb.). Neler Ölçülür? Redis komutları (örn. GET, SET, MGET, PUBLISH) Komutun başlangıç ve bitiş zamanı Hata durumları (ör. bağlantı hataları, time-out) 4. Redis Instrumentation # Fayda: Redis çağrılarının ne kadar sık yapıldığını ve ne kadar sürdüğünü tespit edebilirsiniz. Uygulamanın nakit (cache) katmanında olup bitenleri tek bir trace altında izlemek mümkündür. 5. MassTransit Library Instrumentation # Amaç: RabbitMQ üzerinden mesajların kuyruklanması ve işlenmesi sürecini izlemek. MassTransit Kütüphanesi: .NET dünyasında RabbitMQ gibi mesajlaşma altyapılarına dair kolaylaştırıcı bir çerçeve (framework) sunar. 5. MassTransit Library Instrumentation # Neler Ölçülür? Kuyruğa gönderilen mesajlar (Publish/Send) Tüketici (Consumer) tarafından alınan mesajların işleme süresi Hata durumları (ör. ileti zaman aşımı, işleyici (handler) hatası) 5. MassTransit Library Instrumentation # Fayda: Dağıtık bir mimaride, mesajların uçtan uca (publish -\u0026gt; queue -\u0026gt; consumer) hangi aşamalardan geçtiğini görebilir, hangi aşamada gecikme ya da hata oluştuğunu tespit edebilirsiniz. MassTransit ile entegre bir şekilde izleme sağlayarak, iş akışını (workflow) uçtan uca izleyebilirsiniz. Özetle, bu instrumentations sayesinde uygulamanın önemli katmanları (web istekleri, veritabanı, mesaj kuyruğu vb.) hakkında ayrıntılı telemetri verileri elde edebilir, hata ayıklama ve performans analizi süreçlerinizi kolaylaştırabilirsiniz.\n","date":"1 Ocak 1","permalink":"/tr/presentations/distributed-system-series/observability/opentelemetry-instrumentations/","section":"Presentations","summary":"Instrumentations Nedir? #Instrumentations, bir uygulamanın belirli bölümlerini (ör. ASP.NET Core, HttpClient, Entity Framework, Redis, RabbitMQ) otomatik olarak izlenebilir hâle getiren bileşenler veya kütüphanelerdir. Bu sayede, uygulamanızın farklı katmanlarında (ör. web istekleri, veri tabanı işlemleri, mesaj kuyruğu vb.) gerçekleşen olaylar ve performans metrikleri otomatik olarak toplanır ve kaydedilir.\nNeden Gerekli? Uygulamanın kritik noktalarını (API çağrıları, veritabanı sorguları, mesaj kuyruğu işlemleri vb.) tek tek manuel kodlamadan izlemeye olanak tanır. Performans sorunlarını veya hataları hızlı bir şekilde tespit edip kök neden analizi (root cause analysis) yapmak kolaylaşır.","title":""},{"content":"","date":null,"permalink":"/tr/topics/apm/","section":"Topics","summary":"","title":"APM"},{"content":"","date":null,"permalink":"/tr/topics/distributed-systems/","section":"Topics","summary":"","title":"Distributed Systems"},{"content":"","date":null,"permalink":"/tr/","section":"Hamza Ağar","summary":"","title":"Hamza Ağar"},{"content":"","date":null,"permalink":"/tr/topics/logs/","section":"Topics","summary":"","title":"Logs"},{"content":"","date":null,"permalink":"/tr/topics/metrics/","section":"Topics","summary":"","title":"Metrics"},{"content":"","date":null,"permalink":"/tr/topics/monitoring/","section":"Topics","summary":"","title":"Monitoring"},{"content":"","date":null,"permalink":"/tr/topics/observability/","section":"Topics","summary":"","title":"Observability"},{"content":" Observability Nedir? #(Sistem Gözlemlenebilirliği)\nAll truths are easy to understand once they are discovered; the point is to discover them.\n— Galileo Galilei\nBütün hakikatler keşfedilince kolayca anlaşılır; önemli olan onları keşfetmektir.\nTanım: Observability, uygulamaların canlı ortamda bile iç durumlarını dışa vuran veriler üreterek izlenebilmesini sağlayan bir yaklaşımdır. Aynı zamanda bir sistemin iç durumunu dış gözlemlerle anlama yeteneğini ifade eder ve dağıtık sistemlerde sistemin performansını izlemek ve hataları tespit etmek için kullanılır.\nNeden Önemli?: IDE\u0026rsquo;de lokal olarak debug yapmak kolay. Ancak canlıda bir sorun yaşandığında sistemi gözlemleyebilmek için bazı verileri aktif olarak toplamamız gerekir.\nObservability\u0026rsquo;nin 3 Temel Veri Tipi # Log:\nSistemde meydana gelen olayların kaydıdır ve detaylı analiz yapma imkanı sunar.\nUygulamanın zaman bilgisini (timestamp), mesajı, sınıf/metot bilgilerini ve formatlanmış metinleri içerir.\nHer yere log atmak sakıncalı olabilir, çünkü sistemde yük oluşturabilir.\nMetrics:\nYükü en hafif olan, sistem performansını gösteren sayısal veriler sağlar. (ör. CPU kullanımı, kuyruktaki istek sayısı, hata sayısı).\nUygulamadan veya container/servis mesh gibi katmanlardan toplanabilir.\nTracing:\nİşlemlerin dağıtık sistemlerde nasıl ilerlediğini izler. Özellikle mikroservisler arası isteklerin nasıl geçtiğini takip eder.\nTrace Data: Başlangıçtan bitişine kadar bir operasyonu (transaction) uçtan uca izlemek için oluşturulur (Bu veride hangi işlemle devam etti, işlem ne kadar sürdü gibi veriler vardır.).\nGeniş çaplı (ör. bir HTTP request’in veritabanı işlemlerine kadar takibi) süreçlerde gereklidir.\nHer yerde trace tutmak da kaynak tüketimini artırır; ihtiyaca göre konumlandırılmalıdır.\nObservability\u0026rsquo;nin Önemi # Hata Ayıklama: Performans ve hataların gerçek zamanlı izlenmesi.\nProaktif İzleme: Sorunları önceden tespit etme ve çözüm üretme.\nSistem Kararlılığı: Daha dayanıklı ve performanslı sistemler için kritik.\n","date":null,"permalink":"/tr/presentations/distributed-system-series/observability/","section":"Presentations","summary":"Bu sunumda, modern dağıtık sistemlerde gözlemlenebilirlik (observability) kavramını inceleyeceğiz. Yazılım sistemlerinde gözlemlenebilirlik kavramını, log, trace ve metrics gibi temel bileşenleri ve OpenTelemetry gibi endüstri standartlarını ele alarak, sistemlerin performansını nasıl izleyebileceğimizi ve hataları nasıl tespit edebileceğimizi öğreneceğiz.","title":"Observability ve OpenTelemetry Nedir?"},{"content":"","date":null,"permalink":"/tr/topics/opentelemetry/","section":"Topics","summary":"","title":"OpenTelemetry"},{"content":"","date":null,"permalink":"/tr/presentations/","section":"Presentations","summary":"","title":"Presentations"},{"content":"","date":null,"permalink":"/tr/topics/","section":"Topics","summary":"","title":"Topics"},{"content":"","date":null,"permalink":"/tr/topics/tracing/","section":"Topics","summary":"","title":"Tracing"},{"content":"","date":null,"permalink":"/tr/tags/acid/","section":"Tags","summary":"","title":"ACID"},{"content":"","date":null,"permalink":"/tr/tags/base/","section":"Tags","summary":"","title":"BASE"},{"content":"","date":null,"permalink":"/tr/tags/b%C3%BCy%C3%BCk-veri/","section":"Tags","summary":"","title":"Büyük Veri"},{"content":" Bu yazı serimizde, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz. ","date":null,"permalink":"/tr/series/big-data/","section":"Series","summary":"Bu yazı serimizde, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz.","title":"Büyük Veri (Big Data) Nedir?"},{"content":"","date":null,"permalink":"/tr/tags/cap-teoremi/","section":"Tags","summary":"","title":"CAP Teoremi"},{"content":"","date":null,"permalink":"/tr/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tr/tags/index/","section":"Tags","summary":"","title":"Index"},{"content":"","date":null,"permalink":"/tr/tags/nosql/","section":"Tags","summary":"","title":"NoSQL"},{"content":"","date":null,"permalink":"/tr/series/","section":"Series","summary":"","title":"Series"},{"content":"NoSQL veritabanları, günümüzün büyük veri ve modern uygulama ihtiyaçlarını karşılamak için geleneksel ilişkisel veritabanlarından farklı bir yaklaşım sunar. Bu yazımızda, SQL ve NoSQL veritabanları arasındaki temel farklara, ACID ve BASE modelleri arasındaki ayrımlara, CAP Teoremi\u0026rsquo;nin büyük veri dünyasındaki önemine ve NoSQL\u0026rsquo;in sunduğu esnek mimariye odaklanacağız. Ayrıca, farklı NoSQL veritabanı türlerini (doküman, anahtar-değer, sütunlu ve graf veritabanları gibi) örneklerle inceleyeceğiz.1234\nSQL veritabanları, özellikle veritabanı tutarlılığı ve karmaşık sorgular için güçlü bir yapı sunarken, NoSQL veritabanları daha esnek ve yatay ölçeklenebilir çözümler sunar. Bu yazıda, her iki yaklaşımın avantajlarını ve kullanım alanlarını karşılaştırarak, farklı veri gereksinimlerine nasıl hitap ettiklerini ele alacağız.\nBöyle daha kapsamlı oldu! Uygun mudur?\nCAP Teoremi Nedir? #CAP Teoremi, Eric Brewer tarafından ortaya atılmış bir teoridir ve dağıtık sistemlerin üç temel özelliği aynı anda sağlayamayacağını ifade eder. Bu özellikler şunlardır:\nConsistency (Tutarlılık): Sistem üzerinde gerçekleştirilen her okuma işlemi, son yazma işleminden sonra güncellenmiş bir veri döndürmelidir. Yani, tüm düğümler aynı veriyi görmelidir. Availability (Erişilebilirlik): Her okuma veya yazma isteği, bir hata durumu olmadıkça, bir yanıt almalıdır. Sistem sürekli erişilebilir durumda kalmalıdır. Partition Tolerance (Bölümleme Toleransı): Sistem, ağ bölünmeleri veya iletişim kesintileri gibi durumlarda bile çalışmaya devam edebilmelidir. CAP Teoremi, üç özelliğin aynı anda sağlanamayacağını belirtir. Bu nedenle, NoSQL sistemlerinde genellikle iki özellik arasında bir denge kurulur:\nAP (Availability ve Partition Tolerance): Tutarlılıktan ödün verilerek sistem erişilebilirliği ve ağ bölünmesine dayanıklılık önceliklendirilir. Örnek: Cassandra, DynamoDB. CP (Consistency ve Partition Tolerance): Erişilebilirlikten ödün verilerek tutarlılık ve ağ bölünmesine dayanıklılık sağlanır. Örnek: MongoDB, HBase. CA (Consistency ve Availability): Bölümleme toleransı olmadan tutarlılık ve erişilebilirlik sağlanabilir. Geleneksel tek düğümlü SQL veritabanlarında bu model uygulanabilirken, pratikte dağıtık sistemlerde ağ bölünmeleri kaçınılmaz olduğundan bu yaklaşım sürdürülebilir değildir. Dağıtık SQL çözümleri genellikle tutarlılığı sağlamak için erişilebilirlikten ödün verir (CP). Bu teorem, NoSQL veritabanlarının hangi koşullarda daha verimli olduğunu anlamak için kritik bir yol göstericidir.\nBASE ve ACID Nedir? #BASE ve ACID, veritabanı tasarımında farklı yaklaşımları ifade eden iki modeldir. Her iki model de veritabanlarının güvenilirliği, performansı ve ölçeklenebilirliği üzerinde farklı etkiler yaratır.\nACID #ACID ilkeleri, ilişkisel veritabanlarının sağlam ve güvenilir bir şekilde çalışmasını sağlayan temel kurallardır:\nAtomicity (Atomiklik): Bir işlem ya tamamen gerçekleştirilir ya da hiç gerçekleştirilmez. İşlemin bir parçası başarısız olursa, işlem geri alınır ve veritabanı önceki durumuna döner. Consistency (Tutarlılık): Her işlem, veritabanını bir tutarlı durumdan diğerine taşır. Bu, işlem sonrası veritabanının tanımlanmış kurallara uygun bir duruma geçmesini sağlar. Isolation (İzolasyon): Aynı anda birden fazla işlem yürütüldüğünde, işlemler birbirinden etkilenmez. Durability (Kalıcılık): İşlem tamamlandığında, sonuçlar sistemde kalıcı olarak saklanır ve bir sistem hatası durumunda bile veri kaybı yaşanmaz. BASE #BASE yaklaşımı, NoSQL veritabanlarının daha esnek ve ölçeklenebilir bir şekilde çalışmasını sağlar:\nBasically Available (Temelde Erişilebilir): Sistem her zaman bir yanıt döndürür, ancak bu yanıt her zaman güncel olmayabilir. Soft State (Geçici Durum): Veriler, işlem süresince tutarlı olmayabilir ve sistemin durumu zamanla değişebilir. Eventually Consistent (Sonunda Tutarlı): Sistem, belirli bir süre içinde tutarlı bir duruma ulaşır. Verilerin anlık tutarlılığı yerine sonunda tutarlılık sağlanır. BASE modeli, özellikle büyük ölçekli, dağıtık ve dinamik veri gereksinimlerinde tercih edilir. Örneğin, bir sosyal medya platformunda kullanıcının gönderilerini anlık olarak görmemesi büyük bir sorun teşkil etmez, ancak uzun vadede bu verilerin tutarlı hale gelmesi gerekir.\nACID Prensiplerine Bir Örnek: Banka Hesapları #Ahmet, aynı banka hesabına bağlı iki farklı banka kartına sahiptir. Bir gün acil nakit ihtiyacı olur ve hem kendisi hem de kardeşi, farklı ATM\u0026rsquo;lerden aynı anda para çekmeye karar verir. Ahmet, ilk ATM\u0026rsquo;den 500 TL, kardeşi ise ikinci ATM\u0026rsquo;den 400 TL çekmeye çalışır.\nEğer veritabanı ACID prensiplerine uygun çalışmasaydı, bu işlemler birbiriyle uyumsuz şekilde yürütülürdü. Örneğin, hesapta yalnızca 700 TL varsa ve her iki işlem aynı anda gerçekleşirse, veritabanı bu çekimlerden yalnızca birini kaydeder veya hatalı bir bakiye gösterirdi. Ahmet’in 500 TL çektiği işlem kaydedilmiş gibi görünürken, kardeşinin çektiği 400 TL işlem de gerçekleşmiş olabilir ve toplamda 900 TL çekilmesine rağmen hesapta hala 200 TL varmış gibi görünebilirdi. Bu, banka sisteminin tutarsızlık yaşamasına ve müşterilerin yanlış bilgiye ulaşmasına neden olurdu.\nACID prensipleri sayesinde bu durumun önüne geçilir. Veritabanı işlemleri bir bütün olarak ele alır ve bir işlem tamamlanmadan diğerine izin vermez. Böylece, hesap bakiyesi her zaman doğru ve tutarlı bir şekilde yansıtılır. Bu prensip, özellikle finansal işlemler gibi kritik süreçlerde büyük önem taşır. BASE Prensiplerine Bir Örnek: Sosyal Medya #Öte yandan, BASE prensipleri farklı bir yaklaşımı benimser ve genellikle sosyal medya platformlarında karşımıza çıkar. Örneğin, bir ünlü Instagram’da bir paylaşım yaptığında, gönderinin altında beğeni sayısının tam olarak 1.101.000 ya da sadece 1.1 milyon olarak görünmesi pek önemli değildir.\nKullanıcılar için önemli olan, bu gönderinin milyonlarca kişi tarafından beğenildiğinin anlaşılmasıdır; beğeni sayısının kesinliği anlık olarak kritik değildir. Bu yüzden, BASE prensiplerini izleyen sistemler, beğeni sayısını zamanla günceller ve süreç sonunda tutarlı bir hale getirir. Bu sayede sistem, yüksek ölçeklenebilirliği koruyarak kullanıcı deneyimini hızlı bir şekilde sunar.\nBu iki senaryo, ACID ve BASE arasında yapılan temel tercihlerin, farklı kullanım alanları için neden önemli olduğunu anlamamızı sağlar. Kimi zaman kesinlik ve güvenilirlik (ACID), kimi zaman da ölçeklenebilirlik ve esneklik (BASE) ön planda olmalıdır. Doğru Veritabanı Seçiminin Önemi: Gerçek Bir Olay #Bu hikaye, adını paylaşmak istemediğim eski bir yazılımcı arkadaşımın deneyimlerinden geliyor. Bu arkadaşım, iyi bir müşteri kitlesi olan bir e-ticaret sitesi için MongoDB kullanarak bir otomasyon sistemi geliştirdi. Ancak sistem, bir dönem yoğun trafik aldığında, BASE modelinin \u0026ldquo;Eventually Consistent\u0026rdquo; özelliği nedeniyle veritabanına hatalı veriler yazdı. Bunun sonucunda firma, stokta olmayan ürünleri satmaya devam etti ve farkında olmadan binlerce lira zarara uğradı.\nBu olay, veritabanı seçimi ve yapılandırmasının yalnızca bir teknoloji kararı olmadığını, aynı zamanda iş süreçlerini doğrudan etkileyen kritik bir tercih olduğunu gösteriyor. Özellikle tutarlılığın öncelikli olduğu sistemlerde, ihtiyaç analizi ve doğru yapılandırma hayati önem taşır.\nNoSQL Veritabanlarının Gelişimi ve Büyük Veriyle İlişkisi #NoSQL veritabanlarının popülerliği, özellikle büyük veri ve dağıtık sistemlerin ortaya çıkmasıyla birlikte hızla artmıştır. Geleneksel ilişkisel veritabanları (SQL), yüksek hacimli, hızlı büyüyen ve çeşitli veri türlerini işlemek için yeterince esnek değildir. NoSQL veritabanları bu boşluğu doldurur ve aşağıdaki avantajları sağlar:\nYatay Ölçeklenebilirlik: Veritabanı sistemi, donanım kapasitesini artırmak yerine yeni düğümler eklenerek kolayca genişletilebilir. Dinamik Şema: Yapılandırılmamış veya yarı yapılandırılmış verilerle çalışmak için daha uygundur. Performans: Hızlı sorgulama ve düşük gecikme süreleri sunar. Çeşitlilik: Farklı kullanım senaryolarına uygun çeşitli NoSQL türleri bulunmaktadır. Büyük Veri Çözümleri ile Entegrasyon: NoSQL sistemleri, genellikle büyük veri işleme için kullanılan Apache Hadoop gibi platformlarla kolayca entegre olabilir. Hadoop’un HDFS (Hadoop Dağıtık Dosya Sistemi) ve MapReduce teknolojileri, büyük veri kümelerinin işlenmesinde önemli bir rol oynar. Büyük veri, verinin hacmi, çeşitliliği ve hızı (3V: Volume, Variety, Velocity) ile karakterize edilir. Bu tür verilerle başa çıkmak için NoSQL veritabanları ve Hadoop gibi büyük veri teknolojileri daha iyi bir çözüm sunar.\nNoSQL Veritabanı Türleri ve Kullanım Alanları #1. Doküman Veritabanları # Özellikleri: Veriler JSON, BSON veya XML formatında saklanır. Belge odaklı yapı, esnek veri modellemesi sağlar. Kullanım Alanları: İçerik yönetim sistemleri, kataloglar. Örnekler: MongoDB, Couchbase. 2. Anahtar-Değer Veritabanları # Özellikleri: Veriler, anahtar-değer çiftleri olarak saklanır. Basit ama hızlı bir erişim modeli sunar. Kullanım Alanları: Önbellekleme, oturum yönetimi. Örnekler: Redis, DynamoDB. 3. Graf Veritabanları # Özellikleri: Düğümler ve kenarlarla, veriler arasındaki ilişkileri modellemek için idealdir. Kullanım Alanları: Sosyal ağlar, öneri sistemleri. Örnekler: Neo4j. 4. Arama ve Analitik Veritabanları # Özellikleri: Veriler, tam metin arama, analiz ve filtreleme için optimize edilir. Elasticsearch, dağıtık bir altyapıda ölçeklenebilir sorgular sunar. JSON formatında veri saklar ve hızlı arama için ters indeksleme kullanır. Kullanım Alanları: Log analitiği, metin analitiği, öneri sistemleri, büyük veri ile gerçek zamanlı analiz. Örnekler: Elasticsearch, Apache Solr. 5. Geniş Sütunlu Veritabanları # Özellikleri: Veriler sütun bazlı olarak organize edilir. Büyük veri analitiği için optimize edilmiştir. Kullanım Alanları: IoT verileri, log analitiği, büyük veri analitiği. Örnekler: Apache Cassandra, HBase (Hadoop ile birlikte çalışır). HBase, Apache Hadoop ekosisteminin bir parçası olup, büyük ölçekli veri kümelerini işlemeye olanak sağlar. HDFS ile birlikte çalışarak verilerin dağıtık bir şekilde saklanmasını ve sorgulanmasını sağlar. Özellikle büyük veri analitiği ve gerçek zamanlı uygulamalar için ideal bir çözüm sunar.\n6. Zaman Serisi Veritabanları # Özellikleri: Zaman damgasıyla ilişkili veriler için özelleşmiştir. Kullanım Alanları: Sensör verileri, IoT. Örnekler: InfluxDB, TimescaleDB. Geleneksel SQL ve NoSQL Sistemlerinin Karşılaştırılması # Özellik SQL NoSQL Veri Yapısı Sabit şemalı ve ilişkisel. Esnek şemalı ve ilişkisel olmayan. Ölçeklenebilirlik Dikey ölçeklenebilir (daha güçlü sunucular). Yatay ölçeklenebilir (daha fazla düğüm). Performans Karmaşık sorgular için optimize edilmiştir. Büyük veri ve düşük gecikme için uygundur. Kullanım Alanları Finansal işlemler, geleneksel iş uygulamaları. Büyük veri, IoT, sosyal medya uygulamaları. Sonuç #NoSQL veritabanları, modern uygulamaların gereksinimlerini karşılamak adına esneklik ve ölçeklenebilirlik sunar. Büyük veri işleme, IoT ve gerçek zamanlı uygulamalar gibi alanlarda sağladığı avantajlar ise bu teknolojiyi öne çıkarır. Ancak bir veritabanı seçmeden önce, BASE ve ACID modelleri arasındaki farkları anlamak ve uygulamanın ihtiyaçlarını doğru şekilde analiz etmek kritik öneme sahiptir.\nBu yazıda, NoSQL sistemlerinin temel kavramlarına odaklandık. Gelecek yazılarımızda ise Apache Hadoop, Spark, ve Kafka gibi veri akışının yoğun olduğu sistemlerde izlenmesi gereken yolları detaylıca ele alacağız. Bir sonraki yazıda görüşmek üzere! 😊\nWhat’s the Difference Between an ACID and a BASE Database?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nACID Model vs BASE Model For Database\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - Software Architecture \u0026amp; Technology of Large-Scale Systems\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChatGPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"27 Ocak 2025","permalink":"/tr/series/big-data/2-sql-nosql-nedir/","section":"Series","summary":"NoSQL veritabanları, günümüzün büyük veri ve modern uygulama ihtiyaçlarını karşılamak için geleneksel ilişkisel veritabanlarından farklı bir yaklaşım sunar. Bu yazımızda, SQL ve NoSQL veritabanları arasındaki temel farklara, ACID ve BASE modelleri arasındaki ayrımlara, CAP Teoremi\u0026rsquo;nin büyük veri dünyasındaki önemine ve NoSQL\u0026rsquo;in sunduğu esnek mimariye odaklanacağız. Ayrıca, farklı NoSQL veritabanı türlerini (doküman, anahtar-değer, sütunlu ve graf veritabanları gibi) örneklerle inceleyeceğiz.1234\nSQL veritabanları, özellikle veritabanı tutarlılığı ve karmaşık sorgular için güçlü bir yapı sunarken, NoSQL veritabanları daha esnek ve yatay ölçeklenebilir çözümler sunar.","title":"SQL, NoSQL ve Büyük Veri: BASE, ACID ve CAP Teoremi"},{"content":"","date":null,"permalink":"/tr/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tr/categories/teknoloji/","section":"Categories","summary":"","title":"Teknoloji"},{"content":"","date":null,"permalink":"/tr/categories/veritabanlar%C4%B1/","section":"Categories","summary":"","title":"Veritabanları"},{"content":"","date":null,"permalink":"/tr/categories/big-data-serisi/","section":"Categories","summary":"","title":"Big-Data-Serisi"},{"content":"Selamlar,\nUzun zamandır üzerine araştırma yapmak istediğim ve geçmişte biraz da olsa öğrenmeye çalıştığım Büyük Veri konusuna olan ilgim yeniden canlandı. Bu kez, daha derinlemesine bir şekilde incelemek ve öğrendiklerimi bir yazı serisiyle paylaşmaya karar verdim. Ayrıca fırsatım olursa bu seride bir de futbol verileri üzerinde (veya başka bir veri üzerinde) basit de olsa bir büyük veri çalışması yapmak istiyorum. Bu süreçte de birçok farklı kaynaktan yararlanmaya çalışıyorum. 12345\nPeki o halde başlayalım, nedir bu Büyük Veri (Big Data)? Günümüzün dijital dünyasında büyük veri, işletmeler ve organizasyonlar için vazgeçilmez bir kaynak haline gelmiştir. Bu serinin ilk yazısında, büyük verinin ne olduğunu, temel bileşenlerini, Hadoop, Spark ve NoSQL gibi teknolojilerin bu alandaki rollerini ve futbol sektöründe nasıl uygulandıklarını inceleyeceğiz.\nVeriniz yoksa, sadece bir başka fikri olan insansınız.\n— W. Edwards Deming\nVeri, yeni petrole benzer.\n— Clive Humby\nKeyifli okumalar!\nBüyük Veri (Big Data) Nedir? #Büyük veri, geleneksel veri işleme yöntemleriyle yönetilmesi ve analiz edilmesi zor olan, çok büyük hacimde ve çeşitli kaynaklardan gelen veri kümelerini ifade eder. Büyük veri, genellikle 5V modeliyle açıklanır:\nHacim (Volume): Oluşturulan veri miktarının büyüklüğünü ifade eder. Örneğin, futbol maçlarında saniyede üretilen konum ve hareket verileri terabaytlarca bilgi oluşturabilir. Çeşitlilik (Variety): Verinin farklı format ve türlerde olmasıdır; yapılandırılmış (oyuncu istatistikleri), yarı yapılandırılmış (JSON maç raporları) ve yapılandırılmamış (maç videoları) veri gibi. Hız (Velocity): Verinin oluşturulma ve işlenme hızını belirtir. Örneğin, bir futbol maçında sensörlerden gelen veriler anlık olarak analiz edilebilir. Doğruluk (Veracity): Verinin doğruluğu ve güvenilirliğidir. Maç istatistiklerinin hatasız ve anlamlı olması için veri kaynaklarının doğruluğu önemlidir. Değer (Value): Verinin organizasyonlara sağladığı faydadır. Örneğin, oyuncu performans analizinden elde edilen bilgiler, antrenman programlarının optimize edilmesini sağlar. Kişisel yorumum #İncelediğim kaynaklarda, 5V modelinin özellikle ilk üç boyutu (Hacim, Çeşitlilik ve Hız) üzerinde daha fazla duruluyor. Ancak bana göre, son iki boyut olan Doğruluk ve Değer, en az ilk üçü kadar önemli.\nÖrneğin, elimizde yalnızca bir şirkete ait on yıllık bir veri olduğunu düşünelim. Bu veriler satış ve yatırımları içeriyor olsun. Eğer bu verilerin içinde yalnızca şirket ismi gibi doğrudan anlam ifade etmeyen bilgiler varsa, bunlar bizim için pek bir değer taşımaz; aksine, gereksiz bir hesaplama maliyeti oluşturur. Ancak, bu verilere ek olarak şirketin o yıl içerisindeki misyonu ve hedefleri gibi bilgiler de kayıt altına alınmışsa, bu veriler satışlar üzerindeki etkileri analiz etmemizi sağlar. Böylece, elde edilen veriler daha anlamlı hale gelir ve çıktılarımız daha verimli olur.\nBu nedenle, verilerimizin yalnızca hacmi ve çeşitliliği değil, aynı zamanda doğruluğu ve sunduğu değer de büyük veri analizinde kritik öneme sahiptir.\nHadoop Nedir? #Hadoop, büyük veri işleme için kullanılan açık kaynaklı bir framework\u0026rsquo;tür. Apache Vakfı tarafından geliştirilen bu sistem, çok büyük veri kümelerini dağıtık bir ortamda depolamak ve işlemek için tasarlanmıştır 6. Hadoop\u0026rsquo;un temel bileşenleri şunlardır:\nHDFS (Hadoop Distributed File System): Büyük veriyi dağıtık bir şekilde saklar. MapReduce: Büyük veri setlerini işlemeye yönelik bir programlama modeli. YARN (Yet Another Resource Negotiator): Kaynak yönetimini ve iş planlamasını sağlar. Hadoop, futbol gibi veri yoğun sektörlerde büyük maç istatistiklerini saklamak ve analiz etmek için kullanılabilir. Bu kavramlara daha sonraki yazılarımızda ayrıntılı değineceğiz.\nSpark Nedir? #Apache Spark, büyük veri işleme için kullanılan hızlı bir veri analitik motorudur. Hadoop’a benzer şekilde dağıtık veri işlemeye odaklanır ancak Spark, özellikle hafızada veri işleme (in-memory processing) yeteneğiyle öne çıkar 7.\nHızlı İşleme: Spark, veriyi bellekte işlediği için analizlerde 100 kata kadar hız artışı sağlar. Esneklik: SQL, veri akışı (streaming) ve makine öğrenimi gibi farklı görevleri destekler. Kullanım Alanları: Gerçek zamanlı veri analizi, futbol maçlarında akış verilerinin anlık değerlendirilmesi gibi. NoSQL Nedir? #NoSQL (Not Only SQL), yapılandırılmamış veya yarı yapılandırılmış verilerin saklanması ve işlenmesi için tasarlanmış bir veritabanı türüdür 8. Örnek türler:\nDoküman Tabanlı Veritabanları: JSON veya BSON formatında verileri işler. Örneğin, MongoDB. Anahtar-Değer Depoları: Veriler anahtar-değer çiftleri olarak saklanır. Örneğin, Redis. Graf Veritabanları: Oyuncular arasındaki bağlantıları analiz etmek için kullanılabilir. Örneğin, Neo4j. NoSQL, futbol maçlarında üretilen büyük veri setlerini hızlıca sorgulamak ve analiz etmek için ideal bir çözüm sunar.\nFutbol Sektöründe Büyük Veri Uygulamaları #Büyük veri, futbol sektöründe geniş bir uygulama alanı bulmuştur:\nOyuncu Performans Analizi: Sensörler ve kameralarla toplanan veriler, oyuncuların hızını, dayanıklılığını ve taktik uyumunu ölçer. Taktiksel Analiz: Rakip takımların oyun düzenleri, büyük veri analitiği ile incelenir ve taktik geliştirilir. Taraftar Deneyimi: Taraftarların sosyal medya etkileşimleri analiz edilerek kişiselleştirilmiş kampanyalar oluşturulur. Maç İstatistikleri: Gerçek zamanlı analizlerle maç boyunca taktiksel değişikliklere olanak tanır. Örneğin, Spark ve NoSQL veritabanları, bir futbol maçında saniyede üretilen milyonlarca veri noktasını işleyerek antrenörlere gerçek zamanlı raporlar sunabilir.\nBüyük Veri (Big Data) alanında uzmanlaşmış profesyonellere olan talep, günümüz iş dünyasında hızla artmaktadır. Veri analistleri, veri mühendisleri ve veri bilimcileri gibi uzmanlar, şirketlerin stratejik kararlar almasına, operasyonel verimliliklerini artırmasına ve müşteri deneyimlerini iyileştirmesine yardımcı olmaktadır. Özellikle teknoloji, finans, sağlık ve perakende sektörlerinde büyük veri uzmanlarına olan ihtiyaç belirgin bir şekilde artmaktadır.\nTürkiye\u0026rsquo;de de büyük veri alanında uzmanlaşmış profesyonellere yönelik iş ilanları bulunmaktadır. Örneğin, Veri Analiz Uzmanı pozisyonları, farklı sektörlerde faaliyet gösteren firmalar tarafından sıkça aranmaktadır.\nBüyük Veri uzmanları, veri analitiği, makine öğrenimi ve yapay zeka gibi alanlarda derinlemesine bilgi ve deneyime sahip olmalıdır. Bu uzmanlık, onlara yüksek maaşlar ve hızlı kariyer ilerlemesi gibi avantajlar sunmaktadır.\nFutbol kulüpleri de büyük veri mühendislerine ihtiyaç duymaktadır. Örneğin, Manchester United ve Liverpool gibi dev futbol kulüpleri, veri mühendisliği alanında uzmanlaşmış profesyoneller aramaktadır. Bu tür pozisyonlar, spor endüstrisinde veri biliminin önemini ve büyüklüğünü göstermektedir. 910\nLinkedIn\u0026rsquo;de Daha Önceden Paylaşılmış Bir İş İlanı Sonuç #Bu yazıda Büyük Veri kavramının temellerini ve ilgili teknolojilere dair genel bir giriş yaptım. Bir sonraki yazımda, SQL-NoSQL veritabanlarının temellerine, BASE ve ACID modelleri arasındaki farklara, CAP Teoremi\u0026rsquo;ne, büyük veriyle ilişkisine ve NoSQL veritabanı türlerine odaklanacağım.\nBir sonraki yazıda görüşmek üzere! 😊\nUdemy - Yeni Başlayanlar için Big Data: NoSQL \u0026amp; Spark \u0026amp; Hadoop\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - Sıfırdan Her Yönüyle Big Data ( Büyük Veri ) Eğitimi\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - (50 Saat) Python A-Z™: Veri Bilimi ve Machine Learning\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUdemy - Software Architecture \u0026amp; Technology of Large-Scale Systems\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChatGPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nApache Software Foundation. Apache Hadoop Documentation. https://hadoop.apache.org\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nApache Software Foundation. Apache Spark Documentation. https://spark.apache.org\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMongoDB, Inc. MongoDB Official Website. https://www.mongodb.com\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLead Data Scientist Liverpool Careers\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nYouTube - Erden Timur tv100 Canlı Yayın\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"18 Ocak 2025","permalink":"/tr/series/big-data/1-big-data-nedir/","section":"Series","summary":"Bu yazımızda, Büyük Veri (Big Data) kavramını, temel bileşenlerini ve teknolojilerini ele alıyoruz. Hadoop, Spark ve NoSQL gibi araçların bu alandaki rolünü açıklayarak, futbol sektörü gibi örneklerle kullanım alanlarına değiniyoruz.","title":"Büyük Veri: Nedir, Teknolojileri"},{"content":"","date":null,"permalink":"/tr/tags/futbol/","section":"Tags","summary":"","title":"Futbol"},{"content":"","date":null,"permalink":"/tr/tags/hadoop/","section":"Tags","summary":"","title":"Hadoop"},{"content":"","date":null,"permalink":"/tr/tags/spark/","section":"Tags","summary":"","title":"Spark"},{"content":"","date":null,"permalink":"/tr/topics/chain-of-responsibility/","section":"Topics","summary":"","title":"Chain of Responsibility"},{"content":" Chain of Responsibility Nedir? #\nPhoto by Refactoring Guru # Chain of Responsibility\u0026rsquo;nin Tanımı #Chain of Responsibility, bir isteğin, bir zincir şeklinde düzenlenmiş işleyiciler arasında dolaştırılarak işlenmesini sağlar. Her işleyici isteği işleyebilir veya bir sonraki işleyiciye iletebilir.\nChain of Responsibility\u0026rsquo;nin Temel Bileşenleri # Handler (İşleyici): İsteği işleyen veya bir sonraki işleyiciye gönderen temel bileşen. Concrete Handler: İsteği belirli kriterlere göre işleyen işleyici sınıfları. Client: İsteği gönderen bileşen. Chain of Responsibility Nasıl Çalışır? # İstek Gönderme: Müşteri isteği bir işleyiciye iletir. İşleme Kontrolü: İşleyici isteği işleyip işlemeyeceğine karar verir. Zincirleme İşleyiciler: İşleyici isteği işleyemiyorsa bir sonraki işleyiciye iletir. Sonuç: İstek işlenir veya tüm zincir dolaşır. Chain of Responsibility Örnek Kod (C#) #public abstract class Handler { protected Handler next; public void SetNext(Handler nextHandler) { this.next = nextHandler; } public abstract void HandleRequest(string request); } public class ConcreteHandlerA : Handler { public override void HandleRequest(string request) { if (request == \u0026#34;A\u0026#34;) { Console.WriteLine(\u0026#34;Handler A is processing the request.\u0026#34;); } else if (next != null) { next.HandleRequest(request); } } } public class ConcreteHandlerB : Handler { public override void HandleRequest(string request) { if (request == \u0026#34;B\u0026#34;) { Console.WriteLine(\u0026#34;Handler B is processing the request.\u0026#34;); } else if (next != null) { next.HandleRequest(request); } } } // Kullanım: var handlerA = new ConcreteHandlerA(); var handlerB = new ConcreteHandlerB(); handlerA.SetNext(handlerB); handlerA.HandleRequest(\u0026#34;B\u0026#34;); Chain of Responsibility\u0026rsquo;nin Avantajları # Gevşek Bağlılık: İsteği gönderen, hangi işleyicinin sorumlu olduğunu bilmek zorunda değildir. Genişletilebilirlik: Yeni işleyiciler eklenebilir ve zincir kolayca yapılandırılabilir. Sorumluluk Dağılımı: Yük birden fazla işleyici arasında dağıtılabilir. Chain of Responsibility\u0026rsquo;nin Dezavantajları # Zincir Karmaşıklığı: Uzun zincirlerde isteğin işlenme süresi uzayabilir. İşlenmeyen İstekler: Hiçbir işleyici isteği işleyemezse, sorun çözülmemiş olabilir. Chain of Responsibility Kullanım Alanları # Alışveriş Siteleri İş Kuralları: Alışveriş sitelerinde sepet gibi iş kollarında iş kuralları çok fazla olabilir. Bunu daha okunabilir ve bakımı kolay hale getirmek için bu desen kullanılabilir. Destek Hizmetleri: Müşteri şikayetlerinin kademeli olarak çözülmesi. İzin Sistemleri: Bir izin talebinin farklı seviyelerde işlenmesi. Oyun Geliştirme: Oyunlarda olayların farklı karakterler veya mekanlar tarafından işlenmesi. Sonuç # Chain of Responsibility, esnek ve genişletilebilir bir çözüm sunar. İş akışı kolayca yönetilebilir, ancak zincirin iyi yapılandırılması gerekir. Demo # Dinlediğiniz için teşekkürler #Kaynaklar: Refactoring Guru\nÖrnekler Reposu: aimtune/design-patterns-examples\n","date":"7 Ekim 2024","permalink":"/tr/presentations/design-patterns-series/chain_of_responsibility/","section":"Presentations","summary":"Bu sunumda, Chain of Responsibility tasarım deseni ile isteklerin nasıl işleyiciler arasında dolaştırılarak işlendiğini inceleyeceğiz.","title":"Chain of Responsibility"},{"content":"","date":null,"permalink":"/tr/topics/design-patterns/","section":"Topics","summary":"","title":"Design Patterns"},{"content":"","date":null,"permalink":"/tr/topics/handlers/","section":"Topics","summary":"","title":"Handlers"},{"content":"","date":null,"permalink":"/tr/topics/oop/","section":"Topics","summary":"","title":"OOP"},{"content":"","date":null,"permalink":"/tr/topics/software-design/","section":"Topics","summary":"","title":"Software Design"},{"content":"","date":null,"permalink":"/tr/topics/choreography/","section":"Topics","summary":"","title":"Choreography"},{"content":"","date":null,"permalink":"/tr/topics/event-driven-architecture/","section":"Topics","summary":"","title":"Event-Driven Architecture"},{"content":"","date":null,"permalink":"/tr/topics/fault-tolerance/","section":"Topics","summary":"","title":"Fault Tolerance"},{"content":"","date":null,"permalink":"/tr/topics/kubernetes/","section":"Topics","summary":"","title":"Kubernetes"},{"content":"","date":null,"permalink":"/tr/topics/mikroservisler/","section":"Topics","summary":"","title":"Mikroservisler"},{"content":"","date":null,"permalink":"/tr/topics/orchestration/","section":"Topics","summary":"","title":"Orchestration"},{"content":" Saga Pattern #\n(Bağımsız ve Hata Toleranslı İş Akışı Yönetimi) Photo by Microservices Architecture Pattern - SAGA # Saga Pattern\u0026rsquo;e Giriş #Saga, mikroservis tabanlı uygulamalarda uzun süreli ve birden fazla adımdan oluşan işlemleri yönetmek için kullanılan bir iş akışı yönetim desenidir.\nSaga\u0026rsquo;nın Amacı ve Faydaları # Saga, dağıtık sistemlerde uzun süreli işlemleri güvenli bir şekilde yönetmek için kullanılır. İşlemleri adımlara bölerek hata durumunda her bir adımın telafi edilmesini sağlar. Sistemin genel dayanıklılığını artırır ve hata yönetimini daha yapılandırılmış bir şekilde ele alır. Saga Pattern\u0026rsquo;in Temel Bileşenleri # Choreography Orchestration Compensation Error Handling Error Handling (Hata Yönetimi)\nHata yönetimi, Saga Choreography\u0026rsquo;de her adımın hata durumunda telafi işlemlerini tetiklemesiyle gerçekleştirilir. Merkezi bir kontrol olmadığı için servisler kendi hatalarını olay tabanlı bir yaklaşımla yönetir ve durumu geri alır.\nSaga Pattern\u0026rsquo;in Temel Bileşenleri # Event-Driven Communication Service Independence Real-Time Updates Distributed Transactions Event-Driven Communication (Olay Tabanlı İletişim)\nServisler arasında asenkron iletişim, olay tabanlı bir yapı ile sağlanır. Her servis, bir işlemi tamamladığında bir olay yayınlar ve bu olay, diğer servisler tarafından dinlenerek işlemlerin tetiklenmesini sağlar.\nService Independence (Servis Bağımsızlığı)\nChoreography, her servisin kendi iş mantığını bağımsız olarak yönetmesini sağlar. Bu yapı, servislerin birbirinden izole olmasını ve kendi başlarına çalışabilmelerini mümkün kılar, böylece sistemin esnekliği artar.\nReal-Time Updates (Gerçek Zamanlı Güncellemeler)\nOlay tabanlı iletişim sayesinde servisler gerçek zamanlı olarak birbirleriyle etkileşime geçer. Bu sayede, sistemdeki güncellemeler anında diğer servisleri tetikler ve hızlı tepki süreleri sağlar.\nDistributed Transactions (Dağıtık İşlemler)\nDağıtık işlemler, Saga Pattern ile adımlara bölünerek yönetilir. Her bir işlem adımı bağımsızdır ve hata durumunda telafi edici işlemlerle güvenilir bir şekilde geri alınabilir, bu da sistemin bütünlüğünü korur.\nChoreography vs Orchestration #Choreography ve Orchestration, Saga Pattern\u0026rsquo;in iki ana uygulama yöntemidir. Bu sunumda özellikle Choreography üzerine odaklanacağız.\nChoreography ve Orchestration Farkları # Choreography: Servisler olaylar aracılığıyla birbirleriyle konuşur, merkezi bir kontrol yoktur. Orchestration: Merkezi bir kontrol birimi (orchestrator) tüm süreci yönetir ve kontrol eder. Choreography Yapısının Özellikleri # Olay Tabanlı İletişim: Servisler arasında asenkron olaylar yoluyla iletişim kurulur, bu da sistemin daha hızlı tepki vermesini sağlar. Servislerin Bağımsızlığı: Her servis kendi sorumluluğunda olan işi yapar ve diğer servislerden bağımsız çalışır. Bu, sistemin esnekliğini ve ölçeklenebilirliğini artırır. Choreography Yapısının Özellikleri # Dağıtık Mimari için Uygunluk: Choreography, dağıtık sistemlerde merkezi bir yönetim olmadan iş akışlarını etkin bir şekilde yönetir. Servisler kendi işlemlerini yönetirken olay tabanlı bir akışla ilerler. Choreography\u0026rsquo;nin Avantajları # Merkezi kontrol birimi yoktur; servisler bağımsızdır. Olay tabanlı iletişim, hızlı ve gerçek zamanlı güncellemeler sağlar. Sistemin esnekliği ve ölçeklenebilirliği yüksektir. Choreography\u0026rsquo;nin Dezavantajları ve Zorlukları # Hata yönetimi karmaşıktır ve telafi işlemleri zor olabilir. Olayların izlenmesi ve yönetimi zordur (event storming). Servisler arasında beklenmeyen bağımlılıklar oluşabilir. Compensation İşlemleri (Compensable Transactions) # Başarısız adımları geri alarak sistemin önceki durumuna dönmesini sağlar. Telafi edici işlemler her adım için ayrı tanımlanır ve hata durumunda tetiklenir. Servisler bağımsız çalışırken kendi telafi işlemlerini yönetir. Hata Yönetimi # Hatalar olaylar aracılığıyla yönetilir ve her adımda telafi işlemleri tetiklenir. Olay tabanlı hata yönetimi, olayların doğru izlenmesini ve uygun yanıt verilmesini gerektirir. Özellikle karmaşık hata senaryoları için dikkatli bir planlama ve güçlü telafi işlemleri gereklidir. Demo # You found the speaker notes! Dinlediğiniz için teşekkürler #Kaynaklar: A\u0026rsquo;dan Z\u0026rsquo;ye Mikroservis Mimarisi Eğitimi - 1. Etap - ChatGPT\nÖrnekler Reposu: aimtune/distributed-systems-design-patterns-examples\n","date":"3 Eylül 2024","permalink":"/tr/presentations/distributed-system-series/saga-pattern-choreography/","section":"Presentations","summary":"Bu sunumda modern mikroservis mimarileri için güçlü bir iş akışı yönetimi deseni olan Saga\u0026rsquo;yı keşfedeceğiz. Sunumda değinilecek Saga konuları: Choreography (Koreografi), Orchestration (Orkestrasyon), Compensation (Telafi İşlemleri), Error Handling (Hata Yönetimi), Transaction Management (İşlem Yönetimi).","title":"Saga Choreography"},{"content":"","date":null,"permalink":"/tr/topics/saga-pattern/","section":"Topics","summary":"","title":"Saga Pattern"},{"content":"Elixir Nedir? #Elixir, fonksiyonel, eş zamanlı (concurrent) ve dağıtık programlama (distributed programming) için tasarlanmış, dinamik ve güçlü bir programlama dilidir. Elixir, özellikle yüksek performanslı, ölçeklenebilir (scalable) ve hata toleranslı (fault tolerance) sistemler geliştirmek için idealdir.1 2\nElixir, Erlang sanal makinesi (BEAM) üzerinde çalışır ve bu sayede güçlü concurrency (eşzamanlılık) özelliklerine sahiptir. Erlang (Ericsson Language), 1980\u0026rsquo;lerde Ericsson tarafından telekomünikasyon sistemleri için geliştirildi ve BEAM sanal makinesi, bu yüksek talepli sistemlerin gereksinimlerini karşılamak için optimize edildi.\nErlang ve Elixir HelloWorld Örnekleri #Erlang #-module(helloworld). -export([say_hello/0]). say_hello() -\u0026gt; io:format(\u0026#34;Hello, World!~n\u0026#34;). Elixir #defmodule HelloWorld do def say_hello do IO.puts(\u0026#34;Hello, World!\u0026#34;) end end HelloWorld.say_hello() Not: Elixir, aslında HelloWorld örneğinde olduğu gibi daha uzun değil, aksine daha kısa yazılabiliyor ve okunabilirlik konusunda da daha iyi. Temel Özellikler # Fonksiyonel Programlama: Elixir, fonksiyonel programlamayı destekler ve immutable (değişemeyen) veri yapıları ile çalışır. Bu, daha güvenli ve öngörülebilir kod yazmanızı sağlar. Örneğin aşağıda map, filter gibi fonksiyonlar zincir şeklinde birbirini pipe(|) işareti ile çağırıyolar ve her biri çıktısını bir sonraki fonksiyona girdi olarak veriyor: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 defmodule MyList do def process_list(list) do list |\u0026gt; Enum.map(\u0026amp;(\u0026amp;1 + 1)) |\u0026gt; Enum.filter(\u0026amp;rem(\u0026amp;1, 2) == 0) |\u0026gt; Enum.map(\u0026amp;(\u0026amp;1 * \u0026amp;1)) |\u0026gt; Enum.sum() end end # Kullanım list = [1, 2, 3, 4, 5] result = MyList.process_list(list) IO.puts(\u0026#34;Sonuç: #{result}\u0026#34;) Eş Zamanlı (Concurrent) ve Dağıtık Sistemler: Elixir, aynı anda birçok işlemi (process) verimli bir şekilde yürütebilir ve dağıtık sistemlerde mükemmel performans sergiler. Erlang VM (BEAM) üzerine inşa edildiği için bu özellikleri doğal olarak sunar. Erlang VM (BEAM): Elixir, Erlang sanal makinesi (BEAM) üzerinde çalışır ve bu sayede Erlang’ın sağlam ve hata toleransı özelliklerinden yararlanır. BEAM, hafif süreçleri (process) ve mesaj geçişini (message passing) destekleyen bir yapı sunar. Bu süreçler, işletim sistemi iş parçacıklarından çok daha hafif olup, binlerce hatta milyonlarca sürecin aynı anda çalıştırılmasını mümkün kılar. Erlang Scheduler, bu hafif süreçleri etkin bir şekilde yönetir ve her bir CPU çekirdeği için bir scheduler thread çalıştırır. Scheduler, süreçlerin adil bir şekilde çalıştırılmasını sağlar ve yüksek verimli bir yük dengeleme mekanizması sunar. Bu özellikler sayesinde, Elixir ile yazılan uygulamalar yüksek eşzamanlılık ve düşük gecikme süreleriyle mükemmel performans sergiler.\nPhoto by How to build fault-tolerant software systems Üretkenlik ve Bakım Kolaylığı: Modern dil özellikleri ve zengin standart kütüphaneleri ile Elixir, geliştiricilerin üretkenliğini artırır ve kodun bakımını kolaylaştırır. Hata Toleransı: Elixir, hata yönetimi konusunda güçlüdür ve sistemlerin kesintisiz çalışmasını sağlamak için “let it crash”3 felsefesini benimser bu da sistemlerin hata durumlarında hızlı bir şekilde toparlanmasını sağlar. 4 Ölçeklenebilirlik (Scalability): Elixir, yüksek ölçeklenebilirlik sunar ve aynı anda milyonlarca işlemi yönetebilir. Güvenilirlik (Reliability): Elixir, sağlam yapısı ve hata toleransı ile güvenilir sistemler geliştirmeyi sağlar. Dağıtık Sistemler (Distribution): Elixir, dağıtık sistemlerde mükemmel performans sergiler ve kolayca ölçeklendirilebilir. Hızlı Yanıt Verme (Responsiveness): Elixir, kullanıcılarınıza anında yanıt verebilen hızlı ve verimli sistemler oluşturmanıza imkan tanır. Canlı Güncellemeler (Live Update): Elixir, uygulamalarınızı kesinti olmadan güncelleyebilmenizi (deployment) sağlar. Yüksek Erişilebilirlik (High Availability): Elixir, yüksek erişilebilirlik gerektiren uygulamalarda mükemmel performans sunar. OTP ve GenServer: Elixir, yüksek performanslı, dağıtık ve hata toleranslı uygulamalar geliştirmek için kullanılan OTP (Open Telecom Platform) adlı bir kütüphane ve araç seti ile birlikte gelir. OTP\u0026rsquo;nin temel yapı taşlarından biri olan GenServer, süreçlerin yaşam döngüsünü ve mesajlaşmasını yönetir. GenServer, belirli işlevleri gerçekleştirmek ve durum bilgisi tutmak için kullanılır, bu da karmaşık iş mantıklarının kolayca yönetilmesini sağlar. Hex Paket Yöneticisi ve Mix: Hex, Elixir ve Erlang projeleri için kullanılan bir paket yöneticisidir. Hex, bağımlılıkları yönetmeyi, paylaşmayı ve Elixir kütüphanelerini kolayca yüklemeyi sağlar. Mix ise Elixir projelerini oluşturmak, derlemek, test etmek ve yönetmek için kullanılan güçlü bir araçtır. Mix, bağımlılık yönetimi, uygulama yapılandırması ve görev otomasyonu gibi işlevleri sağlar. Makrolar: Makrolar, Elixir\u0026rsquo;de kodunuzu derleme zamanında dönüştürmenizi ve genişletmenizi sağlayan güçlü araçlardır. Makrolar, kodunuzu daha dinamik ve esnek hale getirmenizi sağlar. Elixir\u0026rsquo;de makrolar defmacro anahtar kelimesi ile tanımlanır. Örneğin aşağıdaki örnekte5 Ecto kütüphanesiyle .NET\u0026rsquo;teki LINQ yapısına benzer bir sorgulama makrolar sayesinde yapılabilmiş. 1 2 3 4 5 6 7 8 9 10 # Imports only from/2 of Ecto.Query import Ecto.Query, only: [from: 2] # Create a query query = from u in \u0026#34;users\u0026#34;, where: u.age \u0026gt; 18, select: u.name # Send the query to the repository Repo.all(query) Kullanım Alanları #Erlang, özellikle telekomünikasyon sektöründe yüksek erişilebilirlik ve güvenilirlik gerektiren sistemlerde uzun yıllardır kullanılmaktadır. Ericsson, WhatsApp, Facebook ve RabbitMQ gibi büyük şirketler, yüksek performanslı ve dağıtık sistemlerini yönetmek için Erlang kullanmaktadır.6 Ayrıca Elixir\u0026rsquo;i de PEPSICO, Discord, Change.org, Heroku gibi firmalar kullanmaktadır.7 Elixir de Erlang temelli olduğundan çeşitli alanlarda kullanılabilir.\nÖrneğin:\nWeb Geliştirme: Phoenix framework ile birlikte kullanılarak yüksek performanslı web uygulamaları geliştirilebilir. Dağıtık Sistemler: Yüksek erişilebilirlik ve düşük gecikme süreleri gerektiren sistemlerde idealdir. Gerçek Zamanlı Uygulamalar: Anlık mesajlaşma, oyun sunucuları ve IoT uygulamaları gibi gerçek zamanlı sistemlerde kullanılır. Elixir, Erlang\u0026rsquo;ın güçlü yönlerini modern bir sözdizimi ve geliştirme deneyimi ile birleştirerek geliştiricilere sunar. Bu nedenle, Elixir telekomünikasyon, finans, sağlık ve e-ticaret gibi sektörlerde yüksek ölçeklenebilirlik ve düşük gecikme süreleri gerektiren uygulamalar için ideal bir seçimdir.\nElixir Kurulum Rehberi #Elixir programlama dilini bilgisayarınıza kurmak için aşağıdaki adımları takip edebilirsiniz. İşletim sisteminize göre farklı kurulum yöntemleri mevcuttur.\nMacOS Üzerine Elixir Kurulumu # Homebrew Paket Yöneticisini Kurun (Eğer Homebrew yüklü değilse): /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Elixir\u0026rsquo;i Homebrew ile Kurun: brew install elixir Ubuntu/Linux Üzerine Elixir Kurulumu # Paket Yöneticisini Güncelleyin: sudo apt-get update Elixir\u0026rsquo;i Kurun: sudo apt-get install erlang elixir Windows Üzerine Elixir Kurulumu # Erlang/OTP\u0026rsquo;yi İndirin ve Kurun:\nErlang/OTP İndir Elixir\u0026rsquo;i İndirin ve Kurun:\nElixir İndir Not: Ayrıca Windows\u0026rsquo;ta Elixir\u0026rsquo;i winget, choco gibi paket yöneticileriyle de kolay bir şekilde kurabilirsiniz. Kurulum Sonrası Kontroller #Elixir\u0026rsquo;in doğru bir şekilde kurulduğunu doğrulamak için terminal veya komut istemcisinde elixir -v komutunu çalıştırabilirsiniz. Bu komut Elixir\u0026rsquo;in kurulu olduğunu ve sürüm numarasını gösterecektir.\nelixir -v Çıktısı:\nErlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Elixir 1.12.2 (compiled with Erlang/OTP 24) Şimdi kurulumu başarılı bir şekilde yaptığımıza göre interaktif terminalini tanıyalım ve temel bilgileri öğrenmeye başlayalım.\nIEx Nedir ve Nasıl Kullanılır? #IEx (Interactive Elixir), Elixir kodlarını interaktif olarak çalıştırabileceğiniz bir kabuktur(shell). IEx, Elixir dilini öğrenmek ve hızlı bir şekilde kod denemeleri yapmak için ideal bir araçtır.\nIEx\u0026rsquo;in Temel Özellikleri # Interaktif Çalışma Ortamı: Elixir kodlarını doğrudan yazıp çalıştırabilirsiniz. Anında Geri Bildirim: Yazdığınız kodun çıktısını hemen görebilirsiniz. Gelişmiş Yardım Sistemi: Elixir modülleri ve fonksiyonları hakkında anında yardım alabilirsiniz. Gelişmiş Debugging ve Profiling: Kodunuzu adım adım çalıştırabilir ve performans analizleri yapabilirsiniz. IEx Nasıl Kullanılır? #IEx\u0026rsquo;i Başlatma #IEx’i başlatmak için terminal veya komut istemcisinde iex komutunu yazmanız yeterlidir:\niex Sizi şöyle bir ekran karşılayacaktır:\nErlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help) iex(1)\u0026gt; Örneğin bir toplama işlemi yapalım ve sonucunu alalım. #Erlang/OTP 24 [erts-12.2.1] [source] [64-bit] [smp:20:20] [ds:20:20:10] [async-threads:1] [jit] Interactive Elixir (1.12.2) - press Ctrl+C to exit (type h() ENTER for help) iex(1)\u0026gt; 1+1 2 iex(2)\u0026gt; Yardım Alma #IEx, Elixir modülleri ve fonksiyonları hakkında yardım almanızı sağlar. Yardım almak için h komutunu kullanabilirsiniz. Örneğin IO.puts fonksiyonu hakkında bilgi alalım:\niex(2)\u0026gt; h IO.puts def puts(device \\\\ :stdio, item) @spec puts(device(), chardata() | String.Chars.t()) :: :ok Writes item to the given device, similar to write/2, but adds a newline at the end. By default, the device is the standard output. It returns :ok if it succeeds. ## Examples IO.puts(\u0026#34;Hello World!\u0026#34;) #=\u0026gt; Hello World! IO.puts(:stderr, \u0026#34;error\u0026#34;) #=\u0026gt; error iex(3)\u0026gt; IEx\u0026rsquo;den Çıkma #IEx kabuğundan çıkmak için aşağıdaki yöntemleri kullanabilirsiniz:\nCTRL+C Tuş Kombinasyonu: İki kez CTRL+C tuş kombinasyonunu uygulayın.\nSystem.halt/0 Fonksiyonu: System.halt() fonksiyonunu çalıştırın.\niex\u0026gt; System.halt() Not: \u0026rsquo;/0\u0026rsquo; bu fonksiyonun parametresiz halini kullanabileceğimizi göstermektedir. Parametre sayısına göre slash işaretinin yanındaki sayı değişebilir. Daha fazla özelliğe farklı bölümlerde ayrıca değineceğiz şimdilik temeller için bunları bilmek yeterli olacaktır.\nElixir in Action Second Edition by Saša Jurić\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChatGPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLet It Crash\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nErlang “Let it Crash” Approach to Building Reliable Services\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nEcto.Query\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nWho uses Erlang for product development?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCompanies using Elixir in production\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"30 Temmuz 2024","permalink":"/tr/series/elixir/1-temel-elixir-bilgisi/","section":"Series","summary":"Bu yazımızda, Elixir programlama dilinin temel özelliklerine odaklanıyoruz. Fonksiyonel programlama yaklaşımını benimseyen Elixir, dağıtık sistemler ve yüksek performanslı uygulamalar geliştirmek için ideal bir dil olarak dikkat çekiyor. Erlang VM üzerinde çalışarak hata toleransı, ölçeklenebilirlik ve yüksek hız sunan Elixir, modern yazılım geliştirme süreçlerinde önemli bir rol üstleniyor. Yeni başlayanlar için Elixir\u0026rsquo;in temel bilgilerini ve kurulum adımlarını detaylıca ele alıyoruz.","title":"1 - Elixir nedir? Nasıl Kurulur ve Kullanılır"},{"content":"","date":null,"permalink":"/tr/tags/elixir/","section":"Tags","summary":"","title":"Elixir"},{"content":" Bu serimizde Elixir dili hakkında yaptığım araştırmalar ve sonucunda aldığım notları aktarmaya çalıştım. ","date":null,"permalink":"/tr/series/elixir/","section":"Series","summary":"Bu serimizde Elixir dili hakkında yaptığım araştırmalar ve sonucunda aldığım notları aktarmaya çalıştım.","title":"Elixir"},{"content":"","date":null,"permalink":"/tr/categories/elixir-serisi/","section":"Categories","summary":"","title":"Elixir-Serisi"},{"content":"","date":null,"permalink":"/tr/tags/erlang/","section":"Tags","summary":"","title":"Erlang"},{"content":"","date":null,"permalink":"/tr/topics/cross-cutting-concerns/","section":"Topics","summary":"","title":"Cross Cutting Concerns"},{"content":"","date":null,"permalink":"/tr/topics/dapr/","section":"Topics","summary":"","title":"Dapr"},{"content":" Dapr #(Distributed Application Runtime)\nDapr\u0026rsquo;a Giriş #Dapr, mikroservis tabanlı uygulamaların geliştirilmesini ve çalıştırılmasını kolaylaştıran, open-source bir sidecar ürünüdür.\nSidecar Pattern Nedir? #Sidecar Pattern, yardımcı bir bileşenin (sidecar) ana uygulamaya eklenmesiyle (container veya process), uygulamanın iş mantığına müdahale etmeden ortak görevlerin yürütülmesini sağlar. Güvenlik, logging ve dinamik yapılandırma gibi cross cutting concerns\u0026rsquo;leri yönetmek için idealdir.\nCross Cutting Concerns Nedir? #Cross cutting concerns, yazılım sisteminde birçok modül veya katmanda ortak olan ve tekrarlanan fonksiyonel özelliklerdir. Güvenlik, logging, hata yönetimi, performans izleme gibi konular bu kapsamda değerlendirilir. Bunlar, sistemin bakımını ve genişletilebilirliğini artırır.\nSidecar Pattern\u0026rsquo;in Avantajları # Yardımcı hizmetleri izole eder. Uygulamanın modülerliğini ve yeniden kullanılabilirliğini artırır. Yönetimi ve bakımı kolaylaştırır. Örnek Sidecar: Resiliency (Dayanıklılık) # Resiliency, bir sistemin hatalardan kurtulma ve hizmet vermeye devam etme yeteneğidir. Sidecar kullanarak bir mikroservise resiliency özellikleri\neklemek, özellikle ağ hataları veya diğer geçici sorunlar durumunda hizmet sürekliliğini sağlamak için etkilidir. Bu sidecar, otomatik yeniden deneme\n(retry), devre kesici (circuit breaker) ve zaman aşımı (timeout) gibi dayanıklılık desenlerini uygular. Örnek Sidecar: Resiliency (Dayanıklılık) # Bizler de sidecar\u0026rsquo;larda örneği uygulamamıza gelen trafiği sadece sidecar üstünden alabiliriz ve gelen istekleri sidecar içerisinde resiliency görevi\ngörecek kodlardan geçiririz ve uygulamamızın ayakta olmadığı durumda resiliency policy\u0026rsquo;lerine göre tekrar istek atma veya istek durdurma sürecine geçer. Dapr\u0026rsquo;ın Amacı ve Faydaları # Uygulama mantığını değiştirmeden dağıtılmış sistemlerin yaygın ihtiyaçlarını karşılamak için çeşitli yapı taşları (building blocks) ve birçok farklı özellik sunar. HTTP ve gRPC protokolleri üzerinden çalışarak çoklu programlama dilleriyle uyumluluk sunar. Kolay programlayabilmek için birçok farklı dilde SDK\u0026rsquo;ları vardır. Dapr\u0026rsquo;ın Temel Bileşenleri # Service Invocation* # State Management* # Secrets Management* # Configuration* # Dapr\u0026rsquo;ın Temel Bileşenleri # Pub/Sub Messaging # Bindings # Distributed lock # Cryptography # Actors # Workflow # Dapr\u0026rsquo;ın Diğer Özellikleri #\nResiliency* #Hata toleransı sağlamak için zaman aşımı, yeniden deneme, devre kesici ve geri çekilme gibi politikalar tanımlamayı ve uygulamayı destekler.\nDapr\u0026rsquo;ın Diğer Özellikleri #\nObservability #Open Telemetry ve Zipkin gibi protokollerle izleme verilerini toplar ve birçok gözlemlenebilirlik aracıyla entegrasyon sağlar.\nDapr\u0026rsquo;ın Diğer Özellikleri #\nSecurity #Varsayılan olarak etkin güvenlik özellikleri sunar, API\u0026rsquo;lar, servisler ve bileşenler için uygulamaya özel politikalar ayarlama imkanı sağlar. İletişim mTLS ile otomatik olarak şifrelenir.\nService Invocation # Mikroservisler arası iletişim sağlar. HTTP veya gRPC ile çalışır. Servis keşfi ve yük dengeleme özellikleri içerir. Servislerdeki iletişimde araya girdiği için security, resiliency, observability gibi yapıları da bu istekler çalıştığı anda uygulayabilir. State Management #Uygulamalarda durum (state) kalıcılığı sağlar.\nKey/value tabanlı durum depolamada görev alır.\nFarklı ürünler ile entegre edilebilir (Redis, MongoDB, SQLs*, In-Memory, etcd, vb…).\nState Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Secrets Management #Güvenlik açısından hassas bilgilerin korunmasını sağlar.\nŞifreler, API anahtarları, güvenlik sertifikaları gibi gizli bilgilerin yönetimini içerir.\nErişim kontrolü ve şifreleme kullanılarak güvenli bir şekilde saklanır ve erişilir.\nFarklı ürünler ile entegre edilebilir (Azure Key Vault, AWS Secrets Manager, HashiCorp Vault, vb.).\nSecrets Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Configuration Management #Uygulamanın çalışma şeklini belirleyen ayarların yönetimini sağlar.\nUygulama ayarları, çevresel değişkenler ve yapılandırma dosyalarını içerir.\nUygulama yeniden başlatılmadan veya kod değiştirilmeden kolayca güncellenebilir.\nFarklı ürünler ile entegre edilebilir (Redis, Consul, Kubernetes ConfigMaps, Azure App Configuration vb.).\nConfiguration Management # apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: statestore Demo # You found the speaker notes! Dinlediğiniz için teşekkürler #Kaynaklar: dapr.io - ChatGPT\nÖrnekler Reposu: aimtune/dapr-examples\n","date":"28 Temmuz 2024","permalink":"/tr/presentations/dapr-series/dapr-1/","section":"Presentations","summary":"Bu sunumda modern mikroservis mimarileri için güçlü bir sidecar aracı olan \u003cstrong\u003eDapr\u003c/strong\u003e\u0026lsquo;ı (Distributed Application Runtime) keşfedeceğiz. Sunumda değinilecek Dapr konuları: \u003cstrong\u003eService Invocation\u003c/strong\u003e (Servis Çağırma), \u003cstrong\u003eState Management\u003c/strong\u003e (Durum Yönetimi), Secrets Management (Gizli Veri Yönetimi), \u003cstrong\u003eConfiguration\u003c/strong\u003e (Yapılandırma), \u003cstrong\u003eResiliency\u003c/strong\u003e (Dayanıklılık).","title":"Dapr Bölüm 1"},{"content":"","date":null,"permalink":"/tr/topics/javascript/","section":"Topics","summary":"","title":"JavaScript"},{"content":"","date":null,"permalink":"/tr/topics/node.js/","section":"Topics","summary":"","title":"Node.js"},{"content":"","date":null,"permalink":"/tr/topics/redis/","section":"Topics","summary":"","title":"Redis"},{"content":"","date":null,"permalink":"/tr/topics/sidecar-pattern/","section":"Topics","summary":"","title":"Sidecar Pattern"}]